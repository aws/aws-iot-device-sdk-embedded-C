# -*- mode: makefile -*-
# The first line sets the emacs major mode to Makefile

################################################################
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy
# of the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the
# License.

################################################################
# This file Makefile.common defines the basic work flow for cbmc proofs.
#
# The intention is that the goal of your project is to write proofs
# for a collection of functions in a source tree.
#
# To use this file
#   1. Edit the variable definitions in Section I below as appropriate for
#      your project, your proofs, and your source tree.
#   2. For each function for which you are writing a proof,
#      a. Create a subdirectory <DIR>.
#      b. Write a proof harness (a function) with the name <HARNESS_ENTRY>
#         in a file with the name <DIR>/<HARNESS_FILE>.c
#      c. Write a makefile with the name <DIR>/Makefile that looks
#         something like
#
#         HARNESS_FILE=<HARNESS_FILE>
#         HARNESS_ENTRY=<HARNESS_ENTRY>
#
#         PROJECT_SOURCES += $(SRCDIR)/libraries/api_1.c
#         PROJECT_SOURCES += $(SRCDIR)/libraries/api_2.c
#
#         PROOF_SOURCES += $(PROOFDIR)/harness.c
#         PROOF_SOURCES += $(SRCDIR)/cbmc/proofs/stub_a.c
#         PROOF_SOURCES += $(SRCDIR)/cbmc/proofs/stub_b.c
#
#         UNWINDSET += foo.0:3
#         UNWINDSET += bar.1:6
#
#         REMOVE_FUNCTION_BODY += api_stub_a
#         REMOVE_FUNCTION_BODY += api_stub_b
#
#         DEFINES = -DDEBUG=0
#
#         include ../Makefile.common
#
#      d. Change directory to <DIR> and run make
#
# Dependency handling in this file may not be perfect. Consider
# running "make clean" or "make veryclean" before "make report" if you
# get results that are hard to explain.

SHELL=/bin/bash

default: report

################################################################
################################################################
## Section I: This section gives common variable definitions.
##
## Feel free to edit these definitions for your project.
##
## Definitions specific to a proof (generally definitions defined
## below with ?= like PROJECT_SOURCES listing the project source files
## required by the proof) should be defined in the proof Makefile.
##
## Remember that this Makefile is intended to be included from the
## Makefile in your proof directory, so all relative pathnames should
## be relative to your proof directory.
##

# Absolute path to the directory containing this Makefile.common
# See https://ftp.gnu.org/old-gnu/Manuals/make-3.80/html_node/make_17.html
PROOF_ROOT = $(dir $(abspath $(filter %/Makefile.common,$(MAKEFILE_LIST))))

# Project-specific definitions to override defaults below
sinclude $(PROOF_ROOT)/Makefile.local

# Path to the directory containing the proof harness
PROOFDIR ?= $(abspath .)

# Path to the root of the source tree
SRCDIR ?= $(abspath $(PROOFDIR)/../../../../../..)

config:
	ls $(SRCDIR)

# Path to the root of the cbmc work.
#
# Projects generally have a directory $(CBMCDIR) with subdirectories
# $(CBMCDIR)/proofs containing the proofs and maybe $(CBMCDIR)/stubs
# containing the stubs used in the proof.  This Makefile is generally
# at $(CBMCDIR)/proofs/Makefile.common.
CBMCDIR ?= $(SRCDIR)/cbmc

# Default CBMC flags used for property checking and coverage checking
CBMCFLAGS += --unwind 1 $(CBMC_LOOP_UNWINDINGS)

# Additional CBMC flags used for property checking
CHECKFLAGS += --bounds-check
CHECKFLAGS += --conversion-check
CHECKFLAGS += --div-by-zero-check
CHECKFLAGS += --float-overflow-check
CHECKFLAGS += --nan-check
CHECKFLAGS += --pointer-check
CHECKFLAGS += --pointer-overflow-check
CHECKFLAGS += --signed-overflow-check
CHECKFLAGS += --undefined-shift-check
CHECKFLAGS += --unsigned-overflow-check

# Additional CBMC flags used for coverage checking
COVERFLAGS +=

# Additional CBMC flag to CBMC control verbosity.
#
# Meaningful values are
# 0 none
# 1 only errors
# 2 + warnings
# 4 + results
# 6 + status/phase information
# 8 + statistical information
# 9 + progress information
# 10 + debug info
CBMC_VERBOSITY ?= --verbosity 4

# Additional CBMC flag to control how CBMC treats static variables.
#
# NONDET_STATIC is a list of flags of the form --nondet-static
# and --nondet-static-exclude VAR.  The --nondet-static flag causes
# CBMC to initialize static variables with unconstrained value
# (ignoring initializers and default zero-initialization).  The
# --nondet-static-exclude VAR excludes VAR for the variables
# initialized with unconstrained values.
NONDET_STATIC ?=

# Flags to pass to goto-cc for compilation and linking
COMPILE_FLAGS ?=
LINK_FLAGS ?=

# Preprocessor include paths -I...
INC ?=

# Preprocessor definitions -D...
DEFINES ?=

# CBMC object model
#
# CBMC_OBJECT_BITS is the number of bits in a pointer CBMC uses for
# the id of the object to which a pointer is pointing.  CBMC uses 8
# bits for the object id by default. The remaining bits in the pointer
# are used for offset into the object.  This limits the size of the
# objects that CBMC can model.  This Makefile defines this bound on
# object size to be CBMC_MAX_OBJECT_SIZE.  You are likely to get
# unexpected results if you try to malloc an object larger than this
# bound.
CBMC_OBJECT_BITS ?= 8

# CBMC loop unwinding (Normally set in the proof Makefile)
#
# UNWINDSET is a list of pairs of the form foo.1:4 meaning that
# CBMC should unwind loop 1 in function foo no more than 4 times.
# For historical reasons, the number 4 is one more than the number
# of times CBMC actually unwinds the loop.
UNWINDSET ?=

# CBMC function removal (Normally set set in the proof Makefile)
#
# REMOVE_FUNCTION_BODY is a list of function names.  CBMC will "undefine"
# the function, and CBMC will treat the function as having no side effects
# and returning an unconstrained value of the appropriate return type.
# The list should include the names of functions being stubbed out.
REMOVE_FUNCTION_BODY ?=

# The project source files (Normally set set in the proof Makefile)
#
# PROJECT_SOURCES is the list of project source files to compile,
# including the source file defining the function under test.
PROJECT_SOURCES ?=

# The proof source files (Normally set in the proof Makefile)
#
# PROOF_SOURCES is the list of proof source files to compile, including
# the proof harness, and including any function stubs being used.
PROOF_SOURCES ?=

################################################################
################################################################
## Section II: This section is for project-specific definitions


################################################################
################################################################
## Section II: This section defines the process of running a proof
##
## There should be no reason to edit anything below this line.

################################################################
# Paths

CBMC ?= cbmc
GOTO_ANALYZER ?= goto-analyzer
GOTO_CC ?= goto-cc
GOTO_INSTRUMENT ?= goto-instrument
VIEWER ?= cbmc-viewer
MAKE_SOURCES ?= make-sources
VIEWER2 ?= viewer

GOTODIR ?= $(PROOFDIR)/gotos
LOGDIR ?= $(PROOFDIR)/logs

PROJECT ?= project
PROOF ?= proof

HARNESS_GOTO ?= $(GOTODIR)/$(HARNESS_FILE)
PROJECT_GOTO ?= $(GOTODIR)/$(PROJECT)
PROOF_GOTO ?= $(GOTODIR)/$(PROOF)

################################################################
# Useful macros for values that are hard to reference
SPACE :=$() $()
COMMA :=,

################################################################
# Useful macros for running commands

#1: command, 2: flags, 3: log file
DO_AND_LOG_COMMAND = $(1) $(2) 2>&1 | tee $(3); exit $${PIPESTATUS[0]}

#1: command, 2: flags, 3: log file

# CBMC uses the special error-code 10 to signify that it detected an
# assertion violation.	Continue the build so we can output the trace.
DO_AND_LOG_IGNORING_ERROR_10 =	$(1) $(2) 2>&1 | tee $(3); if [ $${PIPESTATUS[0]} -ne 10 ]; then exit $${PIPESTATUS[0]}; fi

#1: flags, 2: source, 3: target
DO_GOTO_ANALYZER = $(call DO_AND_LOG_COMMAND,$(GOTO_ANALYZER),$(CBMC_VERBOSITY) $(1) $(2) $(3), $(call LOG_FROM_ENTRY,$(3)))

#1: flags, 2: source, 3: target
DO_GOTO_CC =  $(call DO_AND_LOG_COMMAND,$(GOTO_CC),$(CBMC_VERBOSITY) $(1) $(2) -o $(3), $(call LOG_FROM_ENTRY,$(3)))

#1: flags, 2: source, 3: target
DO_GOTO_INSTRUMENT = $(call DO_AND_LOG_COMMAND,$(GOTO_INSTRUMENT),$(CBMC_VERBOSITY) $(1) $(2) $(3), $(call LOG_FROM_ENTRY,$(3)))

#1: flags, 2: source, 3: logfile
DO_CBMC =  $(call DO_AND_LOG_IGNORING_ERROR_10,$(CBMC),$(CBMC_VERBOSITY) --flush $(1) $(2), $(3))

#1: message 2: source 3: dest
DO_NOOP_COPY = cp $(2) $(3); echo $(1) | tee $(call LOG_FROM_ENTRY,$(3))

################################################################
# Useful macros translating filenames

C_FROM_GOTO = $(patsubst $(GOTODIR)%,$(SRCDIR)%,$(1:.goto=.c))
GOTO_FROM_C = $(patsubst $(SRCDIR)%,$(GOTODIR)%,$(1:.c=.goto))
LOG_FROM_ENTRY = $(LOGDIR)/$(notdir $(1:.goto=.txt))
LOG_FROM_GOTO = $(patsubst $(GOTODIR)%,$(LOGDIR)%,$(1:.goto=.txt))

################################################################
# Set C compiler defines

CBMCFLAGS +=  --object-bits $(CBMC_OBJECT_BITS)

DEFINES += -DCBMC=1
DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)
DEFINES += -DCBMC_MAX_OBJECT_SIZE="(SIZE_MAX>>(CBMC_OBJECT_BITS+1))"

CBMC_UNWINDSET := $(patsubst %,--unwindset %, $(UNWINDSET))
CBMC_REMOVE_FUNCTION_BODY := $(patsubst %,--remove-function-body %, $(REMOVE_FUNCTION_BODY))

################################################################
# Build targets that make the relevant .goto files

# Compile project sources
$(PROJECT_GOTO)1.goto: $(PROJECT_SOURCES)
	mkdir -p $(dir $@)
	mkdir -p $(dir $(call LOG_FROM_ENTRY,$@))
	$(call DO_GOTO_CC,--export-file-local-symbols $(COMPILE_FLAGS) $(INC) $(DEFINES),$^,$@)

# Compile proof sources
$(PROOF_GOTO)1.goto: $(PROOF_SOURCES)
	mkdir -p $(dir $@)
	mkdir -p $(dir $(call LOG_FROM_ENTRY,$@))
	$(call DO_GOTO_CC,--export-file-local-symbols $(COMPILE_FLAGS) $(INC) $(DEFINES),$^,$@)

# Optionally remove function bodies from project sources
$(PROJECT_GOTO)2.goto: $(PROJECT_GOTO)1.goto
ifeq ($(REMOVE_FUNCTION_BODY),"")
	$(call DO_NOOP_COPY,"Not removing function bodies",$<,$@)
else
	$(call DO_GOTO_INSTRUMENT,$(CBMC_REMOVE_FUNCTION_BODY),$<,$@)
endif

# Don't remove function bodies from proof sources
$(PROOF_GOTO)2.goto: $(PROOF_GOTO)1.goto
	$(call DO_NOOP_COPY,"Not removing function bodies",$<,$@)

# Link project and proof sources into the proof harness
$(HARNESS_GOTO)1.goto: $(PROOF_GOTO)2.goto $(PROJECT_GOTO)2.goto
	$(call DO_GOTO_CC,--function $(HARNESS_ENTRY),$^,$@)

# Optionally fill static variable with unconstrained values
$(HARNESS_GOTO)2.goto: $(HARNESS_GOTO)1.goto
ifeq ($(NONDET_STATIC),"")
	$(call DO_NOOP_COPY,"Not applying --nondet-static",$<,$@)
else
	$(call DO_GOTO_INSTRUMENT,$(CBMC_REMOVE_FUNCTION_BODY) $(NONDET_STATIC),$<,$@)
endif

# Omit unused functions (sharpens coverage calculations)
$(HARNESS_GOTO)3.goto: $(HARNESS_GOTO)2.goto
	$(call DO_GOTO_INSTRUMENT,--drop-unused-functions,$<,$@)

# Omit initialization of unused global variables (reduces problem size)
$(HARNESS_GOTO)4.goto: $(HARNESS_GOTO)3.goto
	$(call DO_GOTO_INSTRUMENT,--slice-global-inits,$<,$@)

# Final name for proof harness
$(HARNESS_GOTO).goto: $(HARNESS_GOTO)4.goto
	cp $< $@

goto: $(HARNESS_GOTO).goto
	echo $(DEPENDENT_GOTOS)

################################################################
# Targets to run the analysis commands

logs/property.txt: $(HARNESS_GOTO).goto
	$(call DO_CBMC,$(CBMCFLAGS) $(CHECKFLAGS) --trace,$<,$@)

logs/property.xml: $(HARNESS_GOTO).goto
	$(call DO_CBMC,$(CBMCFLAGS) $(CHECKFLAGS) --unwinding-assertions --trace --xml-ui,$<,$@)

logs/property-list.xml: $(HARNESS_GOTO).goto
	$(call DO_CBMC,$(CBMCFLAGS) $(CHECKFLAGS) --unwinding-assertions --show-properties --xml-ui,$<,$@)

logs/coverage.xml: $(HARNESS_GOTO).goto
	$(call DO_CBMC,$(CBMCFLAGS) $(COVERFLAGS) --cover location --xml-ui,$<,$@)

property: logs/property.txt

property-list: logs/property-list.xml

coverage: logs/coverage.xml

report: logs/property.txt logs/property-list.xml logs/coverage.xml
	$(VIEWER) \
	--block logs/coverage.xml \
	--goto $(HARNESS_GOTO).goto \
	--htmldir html \
	--property logs/property-list.xml \
	--result logs/property.txt \
	--srcdir $(SRCDIR)

# Caution: run make-sources before running property and coverage checking
# The current make-sources script removes the goto binary
logs/sources.json:
	$(MAKE_SOURCES) --srcdir $(SRCDIR) --gotodir $(PROOFDIR)

report2: logs/sources.json logs/property.xml logs/property-list.xml logs/coverage.xml
	$(VIEWER2) \
	--make-sources logs/sources.json \
	--result logs/property.xml \
	--coverage logs/coverage.xml \
	--property logs/property-list.xml \
	--srcdir $(SRCDIR) \
	--goto $(HARNESS_GOTO).goto \
	--htmldir html \

################################################################
# Targets to clean up after ourselves
clean:
	$(RM) $(DEPENDENT_GOTOS)
	$(RM) TAGS*
	$(RM) *~ \#*

veryclean: clean
	$(RM) -r html
	$(RM) -r logs
	$(RM) -r gotos

.PHONY: setup_dependencies property property-list coverage report clean veryclean testdeps

################################################################

# Project-specific targets requiring values defined above
sinclude $(PROOF_ROOT)/Makefile.targets

# CI-specific targets to drive cbmc in CI
sinclude $(PROOF_ROOT)/Makefile.batch

################################################################
