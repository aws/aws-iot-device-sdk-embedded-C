name: Localhost Server Demo Runner

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-run-localhost-demos:
    name: Build and Run Localhost Server Demos
    runs-on: ubuntu-20.04
    steps:
      - name: Clone This Repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install Python3
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install libmosquitto
        run: sudo apt-get install -y libmosquitto-dev

      - name: Install CMake
        run: |
          curl https://cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.tar.gz -o cmake.tar.gz
          tar -xf cmake.tar.gz

      - name: Generate SSL credentials
        id: generate-credentials
        uses: jasonpcarroll/CI-CD-GitHub-Actions/ssl-credential-creator@main
          
      - name: Start localhost MQTT broker
        id: mqtt-broker
        uses: jasonpcarroll/CI-CD-GitHub-Actions/localhost-mqtt-broker@main
        with:
          root-ca-cert-path: ${{ steps.generate-credentials.outputs.root-ca-cert-path }}
          server-priv-key-path: ${{ steps.generate-credentials.outputs.server-priv-key-path }}
          server-cert-path: ${{ steps.generate-credentials.outputs.server-cert-path }}

      - name: Start localhost HTTP server
        id: http-server
        uses: jasonpcarroll/CI-CD-GitHub-Actions/localhost-http-server@main
        with:
          root-ca-cert-path: ${{ steps.generate-credentials.outputs.root-ca-cert-path }}
          server-priv-key-path: ${{ steps.generate-credentials.outputs.server-priv-key-path }}
          server-cert-path: ${{ steps.generate-credentials.outputs.server-cert-path }}

      - name: Configure CMake Build for Localhost server
        run: |
          mkdir build && cd build
          ../cmake-3.2.0-Linux-x86_64/bin/cmake .. \
          -G "Unix Makefiles" \
          -DBUILD_DEMOS=1 \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_FLAGS='-Wall -Wextra -Werror' \
          -DAWS_IOT_ENDPOINT="localhost" \
          -DBROKER_ENDPOINT="localhost" \
          -DCLIENT_CERT_PATH=${{ steps.generate-credentials.outputs.device-cert-path }} \
          -DROOT_CA_CERT_PATH=${{ steps.generate-credentials.outputs.root-ca-cert-path }} \
          -DCLIENT_PRIVATE_KEY_PATH=${{ steps.generate-credentials.outputs.device-priv-key-path }} \
          -DCLIENT_IDENTIFIER="test" \
          -DTHING_NAME="thing-name" \
          -DS3_PRESIGNED_GET_URL="get-url" \
          -DS3_PRESIGNED_PUT_URL="put-url" \
          -DCLAIM_CERT_PATH="cert/path" \
          -DCLAIM_PRIVATE_KEY_PATH="key/path" \
          -DPROVISIONING_TEMPLATE_NAME="template-name" \
          -DDEVICE_SERIAL_NUMBER="00000" \
          -DCSR_SUBJECT_NAME="CN=Fleet Provisioning Demo" \
          -DGREENGRASS_ADDRESS="greengrass-address"

      - name: Build the HTTP Plaintext Demo
        id: build-http-plaintext
        run: cd build && make http_demo_plaintext

      - name: Run and monitor the HTTP Plaintext Demo
        uses: jasonpcarroll/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: ./build/bin/http_demo_plaintext
          log-dir: demo_run_logs
          timeout-seconds: 300
          success-line: "Demo completed successfully."
          number-of-runs: 1
        
      - name: Build the MQTT Basic TLS Demo
        id: build-mqtt-basic-tls
        continue-on-error: true
        run: cd build && make mqtt_demo_basic_tls

      - name: Run and monitor the MQTT Basic TLS Demo
        if: steps.build-mqtt-basic-tls.outcome == 'success'
        continue-on-error: true
        uses: jasonpcarroll/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: ./build/bin/mqtt_demo_basic_tls
          log-dir: demo_run_logs
          timeout-seconds: 300
          success-line: "Demo completed successfully."
          number-of-runs: 1

      - name: Build the MQTT Plaintext Demo
        id: build-mqtt-plaintext-demo
        continue-on-error: true
        run: cd build && make mqtt_demo_plaintext

      - name: Run and monitor the MQTT Plaintext Demo
        if: steps.build-mqtt-plaintext-demo.outcome == 'success'
        continue-on-error: true
        uses: jasonpcarroll/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: ./build/bin/mqtt_demo_plaintext
          log-dir: demo_run_logs
          timeout-seconds: 300
          success-line: "Demo completed successfully."
          number-of-runs: 1

      - name: Build the MQTT Serializer Demo
        id: build-mqtt-serializer-demo
        continue-on-error: true
        run: cd build && make mqtt_demo_serializer

      - name: Run and monitor the MQTT Serializer Demo
        if: steps.build-mqtt-serializer-demo.outcome == 'success'
        continue-on-error: true
        uses: jasonpcarroll/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: ./build/bin/mqtt_demo_serializer
          log-dir: demo_run_logs
          timeout-seconds: 300
          success-line: "Demo completed successfully."
          number-of-runs: 1

      - name: Build the MQTT Subscription Manager Demo
        id: build-mqtt-subscription-manager-demo
        continue-on-error: true
        run: cd build && make mqtt_demo_subscription_manager

      - name: Run and monitor the MQTT Subscription Manager Demo
        if: steps.build-mqtt-subscription-manager-demo.outcome == 'success'
        continue-on-error: true
        uses: jasonpcarroll/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: ./build/bin/mqtt_demo_subscription_manager
          log-dir: demo_run_logs
          timeout-seconds: 300
          success-line: "Demo completed successfully."
          number-of-runs: 1
        
      - name: 'Upload demo logs'
        uses: actions/upload-artifact@v3
        with:
          name: demo_run_logs
          path: demo_run_logs
