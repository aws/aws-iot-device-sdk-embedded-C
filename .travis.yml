# Only run on the v4 beta branch for now.
branches:
  only:
  - v4_beta

# Build on Ubuntu 16.04.
os: linux
dist: xenial

# Use clang compiler (seems to provide more warnings than gcc).
language: c
compiler:
  - clang

# Matrix of tests to run.
jobs:
  include:
    - env: RUN_TEST=common
    - env: RUN_TEST=mqtt NETWORK_STACK=mbedtls
    - env: RUN_TEST=mqtt NETWORK_STACK=openssl
    - env: RUN_TEST=shadow
    - if: type = push
      compiler: gcc
      env: RUN_TEST=coverage
    - if: type = pull_request
      env: RUN_TEST=doc

# Update repositories.
before_install:
  - sudo apt-get update

# Install dependencies.
install:
  # Install OpenSSL if needed.
  - if [ "$NETWORK_STACK" = "openssl" ]; then sudo apt-get install -y libssl-dev; fi
  # Install graphviz only for documentation builds.
  - if [ "$RUN_TEST" = "doc" ]; then sudo apt-get install -y graphviz; fi
  # Install lcov and coveralls only for coverage builds.
  - if [ "$RUN_TEST" = "coverage" ]; then sudo apt-get install -y lcov; pip install --user cpp-coveralls; fi

# Run the test script based on matrix environment variable.
script:
  # Set identifier (client identifier OR Thing Name).
  - export IOT_IDENTIFIER="$IOT_IDENTIFIER_PREFIX$RUN_TEST"
  - if [ "$NETWORK_STACK" = "openssl" ]; then export IOT_IDENTIFIER="${IOT_IDENTIFIER}ossl"; fi
  # Set default compiler options. Individual test scripts may override this.
  - export COMPILER_OPTIONS="-Wall -Wextra -fsanitize=thread"
  # Choose the network abstraction.
  - if [ "$NETWORK_STACK" = "openssl" ]; then export IOT_NETWORK_USE_OPENSSL=1; else export IOT_NETWORK_USE_OPENSSL=0; fi
  # Get AWS credentials when not a pull request build.
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then mkdir credentials; fi
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then wget https://www.amazontrust.com/repository/AmazonRootCA1.pem -O credentials/AmazonRootCA1.pem; fi
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then echo -e $AWS_IOT_CLIENT_CERT > credentials/clientCert.pem; fi
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then echo -e $AWS_IOT_PRIVATE_KEY > credentials/privateKey.pem; fi
  # Set credential defines passed to CMake when not a pull request build.
  - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then export AWS_IOT_CREDENTIAL_DEFINES="-DIOT_TEST_SERVER=\"\\\"$AWS_IOT_ENDPOINT\\\"\" -DIOT_TEST_PORT=443 -DIOT_TEST_ROOT_CA=\"\\\"../credentials/AmazonRootCA1.pem\\\"\" -DIOT_TEST_CLIENT_CERT=\"\\\"../credentials/clientCert.pem\\\"\" -DIOT_TEST_PRIVATE_KEY=\"\\\"../credentials/privateKey.pem\\\"\""; fi
  # Create build directory.
  - mkdir build
  - cd build
  # Run test script.
  - bash ../scripts/ci_test_$RUN_TEST.sh
