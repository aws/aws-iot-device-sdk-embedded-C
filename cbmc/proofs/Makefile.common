# -*- mode: makefile -*-

SHELL=/bin/bash

default: report

################################################################
# Define source location and cbmc binaries

# MQTT source directory relative to proof subdirectories.
MQTT ?= $(abspath ../../..)

GOTO_CC ?= goto-cc
GOTO_INSTRUMENT ?= goto-instrument
GOTO_ANALYZER ?= goto-analyzer
BATCH ?= cbmc-batch
VIEWER ?= cbmc-viewer

################################################################
# Build goto binary for cbmc
# Build goto binaries with options taken from top-level cmake

INC += \
	-I$(MQTT)/cbmc/proofs \
	-I$(MQTT)/demos \
	-I$(MQTT)/libraries/ \
	-I$(MQTT)/libraries/platform \
	-I$(MQTT)/libraries/standard/common/include \
	-I$(MQTT)/libraries/standard/mqtt/include \
	-I$(MQTT)/libraries/standard/mqtt/src \
	-I$(MQTT)/libraries/standard/mqtt/src/private \
	-I$(MQTT)/ports/common/include \

DEF += \
	-DIOT_SYSTEM_TYPES_FILE=\"$(MQTT)/ports/posix/include/iot_platform_types_posix.h\" \
	-Diotmqtt_EXPORTS \
	-DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS) \
	-DCBMC_MAX_OBJECT_SIZE=$(CBMC_MAX_OBJECT_SIZE) \
	-DCBMC=1 \

CFLAGS += $(CFLAGS2) $(INC) $(DEF) -std=gnu99

# The --nondet-static flag causes cbmc to ignore static initialization
# and havoc static variables to give them unconstrained initial values.
# Use --nondet-static-exclude to remove a variable from the list of
# static variables to havoc.  Use goto-instrument --list-symbols to
# get the fully-qualified name of the variable to remove.  Then add
# --nondet-static-exclude to NONDET in the proof makefile.
# For example:
#   NONDET += --nondet-static-exclude _IotMqtt_SerializePingreq::1::pPingreq

NONDET += --nondet-static

# Out of source builds
#
# Proof makefiles were originally written using in-source builds, but
# this inhibits building and running proofs concurrently when
# different proofs build sources with different configurations.  These
# definitions assume $(OBJS) is the original list of in-source goto
# binaries and defines $(GOTOS) to be the list of out-of-source goto
# binaries written into the local gotos subdirectory.

SRCS=$(patsubst %.goto,%.c,$(patsubst $(MQTT)/%,%,$(OBJS)))
GOTO_DIR=gotos
GOTOS=$(patsubst %.c,$(GOTO_DIR)/%.goto,$(SRCS))

# Build sources in the source tree with full paths
$(GOTO_DIR)/%.goto: $(MQTT)/%.c
	mkdir -p $(dir $@)
	$(GOTO_CC) -o $@ $(CFLAGS) $<

# build sources in the local directory with relative paths
$(GOTO_DIR)/%.goto: ./%.c
	mkdir -p $(dir $@)
	$(GOTO_CC) -o $@ $(CFLAGS) $<

$(MQTT)/build:
	(mkdir -p $(MQTT)/build; cd $(MQTT)/build; cmake ..) \
	       > $(ENTRY)0.txt 2>&1

$(ENTRY)1.goto: $(MQTT)/build $(GOTOS)
	$(GOTO_CC) --function harness -o $@ $(GOTOS) \
		> $(ENTRY)1.txt 2>&1

$(ENTRY)2.goto: $(ENTRY)1.goto
	 $(GOTO_INSTRUMENT) \
			$(ABSTRACTIONS) \
			$(NONDET) \
			--drop-unused-functions \
			--slice-global-inits $< $@ \
		> $(ENTRY)2.txt  2>&1

$(ENTRY).goto: $(ENTRY)2.goto
	cp $< $@

################################################################
# Set C compiler defines

CBMC_OBJECT_BITS ?= 8
CBMCFLAGS += --object-bits $(CBMC_OBJECT_BITS)
CBMC_MAX_OBJECT_SIZE = "(SIZE_MAX>>(CBMC_OBJECT_BITS+1))"

################################################################
# Run cbmc and build html report

CBMCFLAGS += \
	$(UNWINDING) \
	--object-bits $(CBMC_OBJECT_BITS) \
	--bounds-check \
	--conversion-check \
	--div-by-zero-check \
	--float-overflow-check \
	--flush \
	--nan-check \
	--pointer-check \
	--pointer-overflow-check \
	--signed-overflow-check \
	--undefined-shift-check \
	--unsigned-overflow-check \
	--unwinding-assertions \

goto: $(ENTRY).goto

cbmc.txt: $(ENTRY).goto
	- cbmc $(CBMCFLAGS) --trace $< >$@ 2>&1

cbmc.xml: $(ENTRY).goto
	- cbmc $(CBMCFLAGS) --trace --xml-ui $< >$@ 2>&1

cbmc.json: $(ENTRY).goto
	- cbmc $(CBMCFLAGS) --trace --json-ui $< >$@ 2>&1

property.xml: $(ENTRY).goto
	cbmc $(CBMCFLAGS) --show-properties --xml-ui $< >$@ 2>&1

property.json: $(ENTRY).goto
	cbmc $(CBMCFLAGS) --show-properties --json-ui $< >$@ 2>&1

coverage.xml: $(ENTRY).goto
	cbmc $(filter-out --unwinding-assertions,$(CBMCFLAGS)) \
		--cover location --xml-ui $< >$@ 2>&1

coverage.json: $(ENTRY).goto
	cbmc $(filter-out --unwinding-assertions,$(CBMCFLAGS)) \
		--cover location --json-ui $< >$@ 2>&1

cbmc: cbmc.txt

property: property.xml

coverage: coverage.xml

report: cbmc.txt property.xml coverage.xml
	$(VIEWER) \
	--goto $(ENTRY).goto \
	--srcdir $(MQTT) \
	--blddir $(MQTT) \
	--htmldir html \
	--srcexclude "(./verification|./tests|./tools|./lib/third_party)" \
	--result cbmc.txt \
	--property property.xml \
	--block coverage.xml

clean:
	$(RM) $(OBJS) $(ENTRY).goto
	$(RM) $(ENTRY)[0-9].goto $(ENTRY)[0-9].txt
	$(RM) -r $(GOTO_DIR)
	$(RM) cbmc.txt property.xml coverage.xml TAGS TAGS-*
	$(RM) *~ \#*

veryclean: clean
	$(RM) -r html

.PHONY: default goto cbmc property coverage report clean veryclean

################################################################
# Build configuration file to run cbmc under cbmc-batch in CI

JOBOS ?= ubuntu16
PROOFMEM ?= 32000

define yaml_encode_options
       "$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')"
endef

define encode_options
       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='
endef

# Regenerate cbmc-batch.yaml every time (use PHONY, list no dependencies)
cbmc-batch.yaml:
	@echo "Building $@"
	@$(RM) $@
	@echo 'build_memory: $(PROOFMEM)' > $@
	@echo 'cbmcflags: $(strip $(call yaml_encode_options,$(CBMCFLAGS)))' >> $@
	@echo 'coverage_memory: $(PROOFMEM)' >> $@
	@echo "expected: SUCCESSFUL" >> $@
	@echo "goto: $(ENTRY).goto" >> $@
	@echo "jobos: $(JOBOS)" >> $@
	@echo 'property_memory: $(PROOFMEM)' >> $@
	@echo 'report_memory: $(PROOFMEM)' >> $@

.PHONY: cbmc-batch.yaml

################################################################
# Use the latest version of cbmc viewer

VIEWER2=viewer
MAKE_SOURCES=make-sources

sources.json:
	- $(MAKE_SOURCES) --root $(MQTT) --build . > $@

report2: sources.json cbmc.xml property.xml coverage.xml
	- $(VIEWER2) \
	--viewer-sources sources.json \
	--goto $(ENTRY).goto \
	--srcdir $(MQTT) \
	--htmldir html \
	--result cbmc.xml \
	--property property.xml \
	--coverage coverage.xml

clean2: clean
	$(RM) cbmc.xml sources.json

veryclean2: veryclean
	$(RM) cbmc.xml sources.json
	$(RM) viewer-*.json

.PHONY: report2 clean2 veryclean2
