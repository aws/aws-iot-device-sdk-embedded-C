/**
@page guide_developer_styleguide Style Guide
@brief Guide for the coding style used in this SDK.

The goal of this style guide is to enforce a readable and consistent coding style across the entire SDK.

@section guide_developer_styleguide_codingstyle Coding Style
@brief The coding style used in this SDK.

The coding style aims to produce code that is readable and easy to debug. All library code follows these general rules:
- Libraries should only use features from [C99](https://en.wikipedia.org/wiki/C99) and earlier.
- Libraries should [log](@ref logging) extensively.
- Code should be well-commented.
- Only `/*` and @c *`/` should be used to start and end comments.
- All comments end with a period.
- Only spaces should be used for indenting. A single indent is 4 spaces. No tab characters should be used.
- A parenthesis is usually followed by a space (see @ref guide_developer_styleguide_codingstyle_example).
- All lines of code should be less than 80 characters long, although longer lines are permitted if necessary.
- All local variables should be declared at the top of a function.
- All global variables should be declared at the top of a file.
- Variables are always initialized.
- A separator is placed between different sections of a file. The current separator is:
@code{c}
/*-----------------------------------------------------------*/
@endcode
- All files must include @ref AWS_IOT_CONFIG_FILE at the top of the file <b>before any other includes</b>.
- `static` functions must have a declaration at the top of the file and be implemented before any application-facing functions.

See @ref guide_developer_styleguide_codingstyle_example for a more complete example.

@subsection guide_developer_styleguide_codingstyle_example Example File
@brief An example file that follows the coding style rules.

See @ref guide_developer_styleguide_naming for how to name the functions, variables, and macros.

@code{c}
/* Included headers are at the top of the file. The config file include is always first. */

/* Build using a config header, if provided. */
#ifdef AWS_IOT_CONFIG_FILE
    #include AWS_IOT_CONFIG_FILE /* Lines between #ifdef/#endif are indented. */
#endif

/* Standard includes are immediately after the config file. They are sorted alphabetically.
 * They use angle brackets <> around the file name. */

/* Standard includes. */
#include <assert.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>

/* Library internal headers are included next. They use quotes "" around the file name. */

/* Library internal include. */
#include "private/aws_iot_library_internal.h"

/* Library application-facing headers are included last. They use quotes "" around the file name. */

/* Library include. */
#include "aws_iot_library.h"

/*-----------------------------------------------------------*/

/* Defined constants follow the included headers. */

#define _LIBRARY_CONSTANT    ( 10 ) /* When possible, parentheses () should be placed around contant values */

#define _LIBRARY_FUNCTION_MACRO( argument ) \ /* Line continuators are right-aligned. */
    {                                       \ /* Function-like macros are surrounded by curly braces {}. */
        macro_body( argument );             \
    }

/*-----------------------------------------------------------*/

/* Library typedefs follow the defined constants. */

/* Forward declarations are used only when necessary. They are placed before all
 * other typedefs. */

typedef int _type_t;

typedef struct _structType /* Structs are named along with the typedef. */
{
    int member;

    union /* Anonymous structs/unions are permitted only inside of other structs. */
    {
        int a;
        int b;
    };

    int variableLengthMember[]; /* Variable length arrays (a C99 feature) are permitted. */
} _structType_t;

/*-----------------------------------------------------------*/

/* Declarations of static and extern functions follow the typedefs. */

static bool _libraryStaticFunction( void * pArgument,
                                    size_t argumentLength );

/* External function declarations should be used sparingly (using an internal
 * header file to declare functions is preferred). */
extern int AwsIotLibrary_ExternalFunction( void * pArgument );

/*-----------------------------------------------------------*/

/* Declarations of global variables follow the static and extern function
 * declarations. Global variables are permitted, but should be avoided when
 * possible. */

/* Global variables are always initialized. */
static int _globalVariable = 0;
static int _globalArray[ _LIBRARY_CONSTANT ] = { 0 };

/*-----------------------------------------------------------*/

/* Implementations of static functions follow the global variable declarations. */

static bool _libraryStaticFunction( void * pArgument,
                                    size_t argumentLength )
{
    /* All local variables are declared at the top of the function. Variables are
     * always initialized. */
    size_t i = 0;
    int localVariable = 0;
    int * pLocalPointer = ( int * ) pArgument;

    /* All functions make generous use of the logging library. */
    AwsIotLogInfo( "Performing calculation..." );

    /* Checking parameters at the beginning of functions and returning on bad
     * parameter values is encouraged. */
    if( ( pArgument == NULL ) || ( argumentLength == 0 ) ) /* Note the parentheses and spacing in if statements */
    {
        AwsIotLogError( "Bad parameters." );

        return false;
    }

    for( i = 0; i < argumentLength; i++ ) /* Note the spacing in the for loop. */
    {
        localVariable += AwsIotLibrary_ExternalFunction( pArgument );

        AwsIotLogDebug( "Current value is %d.", localVariable );
    }

    if( localVariable < 0 )
    {
        AwsIotLogWarn( "Failed to calculate positive value." );
    }

    AwsIotLogInfo( "Calculation done." );

    return true;
}

/* A separator is placed between all function implementations. */
/*-----------------------------------------------------------*/

/* Implementations of application-facing functions are at the bottom of the file. */

bool AwsIotLibrary_ApplicationFunction( void ) /* Functions with no arguments have void in their argument list. */
{
    _LIBRARY_FUNCTION_MACRO( _globalArray );

    return true;
}

/* Separator and newline at end of file */
/*-----------------------------------------------------------*/

@endcode

@section guide_developer_styleguide_naming Naming
@brief Naming convention used in this SDK.

The naming convention aims to differentiate this SDK's files, variables, and functions to avoid name collisions. In general:
- The first characters of all <i>publicly visible</i> names should identify the name as part of this AWS IoT SDK. <br>
  <b>Example:</b> Names starting with `aws_iot_` or `AwsIot`.
- Words in names should be ordered with the most general word first and the most specific word last. <br>
  <b>Example:</b> `aws_iot_mqtt_api.c` identifies a file as part of the general MQTT library. `AwsIotMqttInternal_ValidateNetIf` identifies a function as part of the <i>Internal</i> component of the general MQTT library.
- Names should avoid using abbreviations.

@subsection guide_developer_styleguide_naming_definedconstantsandenumvalues Defined constants and enum values
@brief Naming convention for constants set using preprocessor @c #`define` and enum values.

@formattable{defined constants and enum values}
@formattableentry{`AWS_IOT_`<b>LIBRARY</b>`_`<b>DESCRIPTION</b>,Defined constants and enum values in application-facing library header files,`AWS_IOT_MQTT_SUCCESS` (aws_iot_mqtt.h)}
@formattableentry{`AWS_IOT_DEMO_`<b>LIBRARY</b>`_`<b>DESCRIPTION</b><br>`AWS_IOT_TEST_`<b>LIBRARY</b>`_`<b>DESCRIPTION</b>,Defined constants and enum values in demos and tests,`AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE`<br>`AWS_IOT_TEST_MQTT_THREADS`}
@formattableentry{`_`<b>DESCRIPTION</b>,Internal constants and enum values,`_MQTT_PACKET_TYPE_CONNECT` (aws_iot_mqtt_internal.h)}

Names of constants and enum values should contain only uppercase letters and underscores. All names intended for application use must begin with `AWS_IOT_`, while names intended for internal use must begin with only `_`.

@subsection guide_developer_styleguide_naming_files Files
@brief Naming convention for files.

@formattable{files}
@formattableentry{`aws_iot_`<b>library</b>`_`<b>description</b>`.extension`,General library file,`aws_iot_mqtt_api.c`}
@formattableentry{`aws_iot_`<b>library</b>`_internal.h`,Internal library header,`aws_iot_mqtt_internal.h`}
@formattableentry{`aws_iot_demo_`<b>library</b>`.c`,Library demo source,`aws_iot_demo_mqtt.c`}
@formattableentry{`aws_iot_tests_`<b>library</b>`_`<b>description</b>`.c`,Library test source,`aws_iot_tests_mqtt_api.c`}

File names contain only lowercase letters and underscores. All file names should start with `aws_iot_` and be named according to their purpose. For example:
- `aws_iot_mqtt_api.c`: A file in the MQTT library that implements the MQTT API functions.
- `aws_iot_demo_mqtt.c`: A file in the Demos for the MQTT library.
- `aws_iot_demo_mqtt_posix.c`: A file in the Demos for the MQTT library on POSIX systems.
- `aws_iot_tests_mqtt_api.c`: A file in the Tests for the MQTT library. Since the tests currently only run on POSIX systems, test file names do not use the `_posix` suffix.

Library file names should use one or two words to describe the functions implemented in that file. For example:
- `aws_iot_mqtt_serialize.c`: Implements the MQTT library's packet serialization and deserialization functions.
- `aws_iot_clock_posix.c`: Implements the platform clock component for POSIX systems.

Declarations of internal functions, structures, macros, etc. of a library should be placed in a header file with an `_internal` suffix. The `_internal` header file should go in the `lib/include/private` directory. For example:
- `aws_iot_mqtt_internal.h`: Declares the MQTT library's internal functions, structures, macros, etc.

File names for tests and demos should all begin with `aws_iot_demo_` and `aws_iot_tests_`, respectively. The names should then specify the library being demoed or or tested; for example, the files names of the MQTT library's demos and tests start with `aws_iot_demo_mqtt_` and `aws_iot_tests_mqtt_`. Additionally, test file names should describe what tests are implemented in the file, such as `aws_iot_tests_mqtt_api.c` for a file containing tests for the MQTT library API functions.

@subsection guide_developer_styleguide_naming_functions Functions (and function-like macros)
@brief Naming convention of functions and function-like macros.

@formattable{functions}
@formattableentry{`AwsIot`<b>Library</b>`_`<b>Description</b>,Externally-visible library function,`AwsIotMqtt_Publish`}
@formattableentry{`AwsIot`<b>Library</b>`Internal_`<b>Description</b>,Internal (but not `static`) library function,`AwsIotMqttInternal_ValidateNetIf`}
@formattableentry{`AwsIotTest`<i>Library</i>`_`<b>Description</b>,Library test-only function,`AwsIotTest_NetworkConnect`<br>`AwsIotTestMqtt_createMqttConnection`}
@formattableentry{`AwsIotDemo_`<b>Library</b>,Library demo function,`AwsIotDemo_Mqtt`}
@formattableentry{`_`<b>description</b>,`static` function,`_createMqttConnection`}
@formattableentry{`AwsIotTest`<b>Library</b>`_`<b>accessedFunction</b>,Test access function,`AwsIotTestMqtt_createMqttConnection`}

Externally visible (i.e. not `static`) functions are [UpperCamelCased](https://en.wikipedia.org/wiki/Camel_case) and must begin with `AwsIot`. Function names should then specify their library name; followed by an underscore; followed by a brief description of what the function does. Internal library functions that are not `static` should have the word `Internal` after the library name. For example:
- `AwsIotMqtt_Publish`: This function is part of the MQTT library. It <i>Publishes</i> an MQTT message.
- `AwsIotMqttInternal_ValidateNetIf`: This function is internal to the MQTT library, but not `static`. It validates an `AwsIotMqttNetIf_t`.

Functions not visible outside their source file (i.e. `static` functions) have names that are [lowerCamelCased](https://en.wikipedia.org/wiki/Camel_case) and begin with an underscore. These function names do not contain the library name or `AwsIot`. For example:
- `_createMqttConnection`: A `static` function in `aws_iot_mqtt_api.c`.

Functions that are specific to the demos and tests begin with `AwsIotDemo` and `AwsIotTest`, respectively. Test access functions begin with `AwsIotTest`; followed by the library name; followed by an underscore; followed by the function that the test function accesses. Since the accessed function is always `static`, the accessed function will be [lowerCamelCased](https://en.wikipedia.org/wiki/Camel_case).

@subsection guide_developer_styleguide_naming_types Types
@brief Naming conventions of library `typedef` types.

@formattable{types}
@formattableentry{`AwsIot`<b>LibraryDescription</b>`_t`,General types in application-facing library header files,`AwsIotMqttConnection_t` (aws_iot_mqtt.h)}
@formattableentry{`AwsIot`<b>LibraryFunction</b>`Info_t`,Application-facing parameter structure,`AwsIotMqttPublishInfo_t`<br>(Parameter structure to `AwsIotMqtt_Publish`)}
@formattableentry{`_`<b>libraryDescription</b>`_t`,Type in an `internal` header,`_mqttOperation_t` (aws_iot_mqtt_internal.h)}
@formattableentry{`_`<b>description</b>`_t`,Internal type in source file,`_topicMatchParams_t` (aws_iot_mqtt_subscription.c)}

Types intended for use in applications are [UpperCamelCased](https://en.wikipedia.org/wiki/Camel_case). The names must start with `AwsIot` and end with `_t`. Parameter structures must indicate their associated function: for example, `AwsIotMqttPublishInfo_t` is passed as a parameter to `AwsIotMqtt_Publish`.

Types intended for internal library use defined in a header file are [lowerCamelCased](https://en.wikipedia.org/wiki/Camel_case). The names must start with `_`, followed by the library name, and end with `_t`. Internal types defined in a library source file must start with `_`, end with `_t`, and not include the library name.

`struct` typedefs should always be named along with the `typedef`. The struct name should be identical to the `typedef` name, but without the `_t` at the end. For example:
@code{c}
typedef struct AwsIotLibraryStruct
{
    int member;
} AwsIotLibraryStruct_t;

typedef struct _libraryInternalStruct
{
    int member;
} _libraryInternalStruct_t;
@endcode

A `struct` may contain anonymous `struct` or `union` members.

@subsection guide_developer_styleguide_naming_variables Variables
@brief Naming conventions of variables.

@formattable{variables}
@formattableentry{<b>variableDescription</b>,General local variable,`startTime`}
@formattableentry{`p`<b>VariableDescription</b>,Local variable pointers and arrays (including strings),`pSubscriptionList`}
@formattableentry{`_`<b>variableDescription</b>,Global variable that is `static`,`_connectMutex` (aws_iot_mqtt_api.c)<br>`_pSamplePayload` (string)}
@formattableentry{`_AwsIot`<i>Library</i><b>Description</b>,Global variable that is <b>NOT</b> `static`,`_AwsIotMqttSendQueue` (aws_iot_mqtt_operation.c)<br>`_pAwsIotSamplePayload` (string)}

Local variable names are [lowerCamelCased](https://en.wikipedia.org/wiki/Camel_case) and consist only of a description of the variable. Names like `i` or `j` are acceptable for loop counters, but all other variables should have a descriptive name.

Global variable names always start with a `_`. Global variables that are `static` consist of only the description in [lowerCamelCase](https://en.wikipedia.org/wiki/Camel_case). Global variables that are not static consist of the library name <b>and</b> the description in [UpperCamelCase](https://en.wikipedia.org/wiki/Camel_case); for example: `_AwsIotLibraryNonStaticGlobalVariable`.

All pointers, arrays, and strings (both global and local) start with `p` (local) or `_p` (global).
*/
