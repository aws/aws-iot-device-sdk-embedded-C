/**
@mainpage
@anchor mqtt
@brief MQTT 3.1.1 client library.

> MQTT stands for MQ Telemetry Transport. It is a publish/subscribe, extremely simple and lightweight messaging protocol, designed for constrained devices and low-bandwidth, high-latency or unreliable networks. The design principles are to minimise network bandwidth and device resource requirements whilst also attempting to ensure reliability and some degree of assurance of delivery. These principles also turn out to make the protocol ideal of the emerging "machine-to-machine" (M2M) or "Internet of Things" world of connected devices, and for mobile applications where bandwidth and battery power are at a premium.

<span style="float:right;margin-right:4em"> &mdash; <i>Official description of MQTT from [mqtt.org](http://mqtt.org)</i></span><br>

This MQTT library implements a subset of the MQTT 3.1.1 standard for compatibility with the [AWS IoT MQTT server](https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html#mqtt). It is also compatible with other MQTT servers. Features of this library include:
- Both fully asynchronous and blocking API functions.
- Thread-aware and parallelizable for high throughput.
- Scalable performance and footprint. The [configuration settings](@ref mqtt_config) allow this library to be tailored to a system's resources.

@attention Currently, this library does not support QoS 2 MQTT messages.

@dependencies{mqtt,MQTT library}
@dot "MQTT direct dependencies"
digraph mqtt_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        mqtt[label="MQTT", fillcolor="#cc00ccff"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        queue[label="Queue", URL="@ref queue"];
        logging[label="Logging", URL="@ref logging"];
    }
    subgraph
    {
        rank = same;
        platform_threads[label="Thread management", fillcolor="#e89025ff", URL="@ref platform_threads"];
        platform_clock[label="Clock", fillcolor="#e89025ff", URL="@ref platform_clock"];
        platform_network[label="Network", fillcolor="#e89025ff", URL="@ref platform_network"];
        platform_static_memory[label="Static memory", fillcolor="#e89025ff", URL="@ref platform_static_memory"];
    }
    mqtt -> queue;
    mqtt -> logging [label=" if logging enabled", style="dashed"];
    mqtt -> platform_threads;
    mqtt -> platform_clock;
    mqtt -> platform_network;
    mqtt -> platform_static_memory [label=" if static memory only", style="dashed"];
    queue -> platform_threads;
    logging -> platform_clock;
    logging -> platform_static_memory [label=" if static memory only", style="dashed"];
}
@enddot

Currently, the MQTT library has the following dependencies:
- The queue library for maintains the data structures for managing in-progress MQTT operations.
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_MQTT is not @ref AWS_IOT_LOG_NONE.
- The platform layer provides an interface to the operating system for thread management, clock functions, networking, etc.

In addition to the components above, the MQTT library also depends on C standard library headers.
*/

/**
@page mqtt_design Design
@brief Architecture behind the MQTT library.

This library uses threads to process outgoing and incoming MQTT operations, and queues to store MQTT operations waiting to be processed.
- [MQTT API functions](@ref mqtt_functions) only enqueue a waiting operation on the <b>Send Queue</b>. API functions return after successfully enqueuing an operation and do not block to wait for the result of the operation.
- <b>Send threads</b> are created when operations arrive in the send queue. These threads remove operations from the send queue in FIFO order and transmit MQTT packets across the network. After transmitting the packet, send threads add operations awaiting responses from the server to the <b>Receive Queue</b>. The setting @ref AWS_IOT_MQTT_MAX_SEND_THREADS controls the maximum number of simultaneous send threads.
- When a response is received from the server, the system's network stack invokes the [MQTT receive callback](@ref mqtt_function_receivecallback). This callback parses the server response, matches the incoming data with an operation in the receive queue, and enqueues the operation in the <b>Callback Queue</b>.
- <b>Callback threads</b> are created when operations arrive in the callback queue. These threads handle notification of an MQTT operation's result. The notification is handled by a separate thread (not the [receive callback](@ref mqtt_function_receivecallback)) to allow [callback functions](@ref AwsIotMqttCallbackInfo_t.function) to block without slowing down the receive callback. The setting @ref AWS_IOT_MQTT_MAX_CALLBACK_THREADS controls the maximum number of simultaneous callback threads.
- Periodically, <b>timer threads</b> will be created to send keep-alive packets and retransmit unacknowledged QoS 1 PUBLISH operations.

Threads are created with @ref platform_threads_function_createdetachedthread. Because the platform layer may be re-implemented across systems, threads will be allocated for the MQTT library on-the-go on some systems, while other systems may use an always-allocated thread pool.

The sequence diagram below illustrates the workflow described above. The application thread is able to continue executing while the MQTT library processes the operation.

@image html mqtt_design_typicaloperation.png width=100%
*/

/**
@page mqtt_demo Demo
@brief The MQTT demo demonstrates usage of the MQTT library.

The MQTT demo demonstrates the subscribe-publish workflow of MQTT. After subscribing to multiple topic filters, it publishes [bursts](@ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE) of data to various topic names. The demo then waits for all messages in a burst to be received on a topic filter. As each message arrives, the demo publishes an acknowledgement message back to the MQTT server. It repeats this cycle @ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_COUNT times.

@image html mqtt_demo.png "MQTT Demo Workflow" width=80%

See @subpage mqtt_demo_config for configuration settings that change the behavior of the demo.

The main MQTT demo file is aws_iot_demo_mqtt.c, which contains platform-independent code. See @ref building_demo for instructions on building the MQTT demo.
*/

/**
@page mqtt_tests Tests
@brief Tests written for the MQTT library.

The MQTT tests reside in the `tests/mqtt` directory. They are divided into the following subdirectories:
- `access`: Helper files that allow access to internal variables and functions of the MQTT library.
- `system`: MQTT system and stress tests. These tests require a network connection. Stress tests may run for a long time, so they are not run unless the command line option `-l` is given to the test executable.
- `unit`: MQTT unit tests. These tests do not require a network connection.

See @subpage mqtt_tests_config for configuration settings that change the behavior of the tests.

The current MQTT tests use the [Unity test framework](http://www.throwtheswitch.org/unity/) and only run on POSIX systems. See @ref building_tests for a guide on running the tests.
*/

/**
@configpage{mqtt_tests,MQTT tests,Test,tests}

@section AWS_IOT_TEST_MQTT_MOSQUITTO
@brief Test the MQTT library against the [public Mosquitto test server](https://test.mosquitto.org/).

When this setting is `1`, the MQTT tests will be built to test against an unsecured [public Mosquitto test server](https://test.mosquitto.org/). This allows the MQTT library to be tested against a fully-compliant MQTT server. Because the connection is unsecured, no credentials are needed for testing against Mosquitto.

@configpossible `0` (use AWS IoT MQTT server) or `1` (use public Mosquitto server) <br>
@configdefault `0`

<div class="configpagedivider">The settings below only affect the [system](@ref aws_iot_tests_mqtt_system.c) and [stress](@ref aws_iot_tests_mqtt_stress.c) tests.</div>

@section AWS_IOT_TEST_MQTT_TIMEOUT_MS
@brief Timeout in milliseconds for MQTT operations.

This value will be passed as `timeoutMs` to all calls to @ref mqtt_function_wait (and similar functions requiring a timeout). Ensure that this value is large enough to accommodate delays caused by the network.

@configpossible Any non-negative integer. <br>
@configrecommended This setting should be at least `1000`. <br>
@configdefault `5000`

@section AWS_IOT_TEST_MQTT_TOPIC_PREFIX
@brief The string prepended to topic filters and client identifiers.

This string will be prepended as the common part of topic filters and client identifiers as a way to differentiate MQTT traffic generated by the tests.

@configpossible Any string that adheres to the [specification for MQTT client identifiers](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349242). <br>
@configdefault `"awsiotmqtttest"`

<div class="configpagedivider">The settings below only affect the [stress](@ref aws_iot_tests_mqtt_stress.c) tests.</div>

@section AWS_IOT_TEST_MQTT_SHORT_KEEPALIVE_INTERVAL_S
@brief The keep-alive interval for the stress tests.

MQTT PINGREQ packets will be sent at this interval.

@configpossible Any positive integer. <br>
@configrecommended This value should be the shortest keep-alive interval supported by the connection. <br>
@configdefault `30` when using the AWS IoT MQTT server; `5` otherwise

@section AWS_IOT_TEST_MQTT_RETRY_MS
@brief The value of #AwsIotMqttPublishInfo_t.retryMs used in the stress tests.

Any lost publish messages will be retransmitted at this time.

@configpossible Any positive integer. <br>
@configrecommended This setting should be at least `250` to avoid excessive network congestion caused by retransmissions. <br>
@configdefault `350`

@section AWS_IOT_TEST_MQTT_RETRY_LIMIT
@brief The value of #AwsIotMqttPublishInfo_t.retryLimit used in the stress tests.

Any lost publish messages will be retried up to this limit.

@configpossible Any positive integer. <br>
@configdefault `32`

@section AWS_IOT_TEST_MQTT_DECONGEST_S
@brief The time to wait for resources to be freed.

Should an MQTT operation fail due to insufficient resources (such as a return value of @ref AWS_IOT_MQTT_NO_MEMORY), the test thread will sleep for this amount to time before retrying to wait for resources to be freed. Larger values for this setting provide a higher change for a successful retry, but will cause the tests to run longer.

@configpossible Any positive integer. <br>
@configdefault `30`

@section AWS_IOT_TEST_MQTT_THREADS
@brief The number of threads to use in the stress tests.

The number of threads to spawn for the stress tests. Up to @ref AWS_IOT_TEST_MQTT_THREADS `*` @ref AWS_IOT_TEST_MQTT_PUBLISHES_PER_THREAD publish messages are sent by stress test.

@configpossible Any positive integer. <br>
@configdefault `16`

@section AWS_IOT_TEST_MQTT_PUBLISHES_PER_THREAD
@brief The number of publish messages each thread in the stress test should send.

Up to @ref AWS_IOT_TEST_MQTT_THREADS `*` @ref AWS_IOT_TEST_MQTT_PUBLISHES_PER_THREAD publish messages are sent by stress test.

@configpossible Any non-negative integer. <br>
@configdefault When @ref AWS_IOT_STATIC_MEMORY_ONLY is `1`, this value defaults to @ref AWS_IOT_MQTT_MAX_IN_PROGRESS_OPERATIONS. Otherwise, it defaults to `100`.
*/

/**
@configpage{mqtt_demo,MQTT demo,Demo,demos}

@section AWS_IOT_DEMO_MQTT_CLIENT_IDENTIFIER
@brief The MQTT client identifier to use for the demo.

No two clients may connect using the same client identifier simultaneously.

The MQTT client identifier may also be set with [the command line option -i](@ref demo_optioni). The command line option will override this setting. If this setting is undefined and no command line option is provided, the demo will generate a unique client identifier to use.

@configpossible Any string representing an MQTT client identifier. MQTT client identifiers may be subject to certain constraints; for example, servers are not obligated to accept client identifiers longer than 23 characters or client identifiers containing non-alphanumeric characters. <br>
@configdefault The demo will generate a unique client identifier if this setting is undefined.

@section AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE
@brief The number of messages published in each burst.

Messages in a burst are rapidly published. After a complete burst is published, the demo waits for the messages to be received on a subscription topic filter. This value may be increased for higher throughput, at the expense of an increased chance of dropped messages. The MQTT demo publishes a total of @ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE `*` @ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_COUNT messages.

@configpossible Any positive integer. <br>
@configdefault `10`

@section AWS_IOT_DEMO_MQTT_PUBLISH_BURST_COUNT
@brief The number of [publish bursts](@ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE) in this demo.

Each burst will rapidly publish @ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE messages. After publishing, the demo will wait for the published messages to be received on a subscription topic filter.

This setting can be increased for a longer demo. The MQTT demo publishes a total of @ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_SIZE `*` @ref AWS_IOT_DEMO_MQTT_PUBLISH_BURST_COUNT messages.

@configpossible Any positive integer. <br>
@configdefault `10`
*/

/**
@configpage{mqtt,MQTT library}

@section AWS_IOT_MQTT_ENABLE_ASSERTS
@brief Set this to `1` to perform sanity checks when using the MQTT library.

Asserts are useful for debugging, but should be disabled in production code. If this is set to `1`, @ref AwsIotMqtt_Assert can be defined to set the assertion function; otherwise, the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function will be used.

@configpossible `0` (asserts disabled) or `1` (asserts enabled)<br>
@configrecommended `1` when debugging; `0` in production code.<br>
@configdefault `0`

@section AWS_IOT_MQTT_ENABLE_METRICS
@brief Set this to `1` to enable anonymous metrics reporting to AWS IoT.

Metrics allow AWS IoT to prioritize engineering resources based on SDK usage. SDK name and version are reported; no personal or identifying information is reported.

@configpossible `0` (metrics reporting disabled) or `1` (metrics reporting enabled)<br>
@configrecommended `1`<br>
@configdefault `1`
@note This setting is only in effect for [MQTT connections with AWS IoT](@ref AwsIotMqttConnectInfo_t.awsIotMqttMode). Metrics are reported through [the MQTT username.](@ref AwsIotMqttConnectInfo_t.pUserName) The MQTT library may overwrite any provided user name if metrics are enabled.

@section AWS_IOT_MQTT_ENABLE_SERIALIZER_OVERRIDES
@brief Set this to `1` to allow the MQTT packet serializer and deserializer functions to be overridden.

Serializer overrides allow the functions that generate and decode MQTT packets to be overridden. When this setting is `1`, each connection may have different serializer and deserializer functions. This allows the MQTT library to be used as a general-purpose transport library (with limitations). Currently, this setting is used to support MQTT over Bluetooth Low-Energy on Amazon FreeRTOS. See #AwsIotMqttNetIf_t for a list of functions that can be overridden. If this setting is `1`, the serializer [initialization](@ref AwsIotMqttInternal_InitSerialize) and [cleanup](@ref AwsIotMqttInternal_CleanupSerialize) functions may be extended by defining `AwsIotMqttInternal_InitSerializeAdditional` and `AwsIotMqttInternal_CleanupSerializeAdditional`. These functions will be called along with the default serializer initialization and cleanup functions. They must have the following signatures:
@code{c}
#include <stdbool.h>

// Returns true on success and false on failure.
bool AwsIotMqttInternal_InitSerializeAdditional( void );
void AwsIotMqttInternal_CleanupSerializeAdditional( void );
@endcode

@configpossible `0` (serializer overrides disabled) or `1` (serializer overrides enabled)<br>
@configrecommended The default value is <b>strongly recommended</b>.<br>
@configdefault The default value of this setting depends on the platform. For example, when running on FreeRTOS with BLE support, this setting will be automatically enabled. Conversely, when running on Linux, this setting will be disabled.

@section AWS_IOT_MQTT_MAX_CALLBACK_THREADS
@brief Set the maximum number of simultaneous callback threads.

Callback threads process notifications from completed MQTT operations or incoming PUBLISH messages. Incoming notifications are queued, then removed from the queue and processed by any available callback threads. User callback functions are invoked from the callback threads. This means that user callback functions should avoid blocking, since blocking will make a callback thread unavailable and cause the queue of notifications to grow. A situation where all callback threads are blocked should certainly be avoided.

@configpossible Any positive integer.<br>
@configrecommended In most use cases, this value can be `1` or `2`. In high-throughput use cases with many MQTT operations or incoming PUBLISH messages, this value can be increased for better performance.<br>
@configdefault `2`

@section AWS_IOT_MQTT_MAX_SEND_THREADS
@brief Set the number of simultaneous send threads.

Send threads process outgoing network packets. Packets are queued, then removed from the queue and sent over the network by any available send threads.

@configpossible Any positive integer<br>
@configrecommended `1`. Unless the [network interface send function](@ref AwsIotMqttNetIf_t.send) supports parallel sends, any value greater than `1` will not provide any performance benefit.<br>
@configdefault `1`

@section AWS_IOT_LOG_LEVEL_MQTT
@brief Set the log level of the MQTT library.

Log messages from the MQTT library at or below this setting will be printed.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref AWS_IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #AWS_IOT_LOG_NONE.

@section AWS_IOT_MQTT_RESPONSE_WAIT_MS
@brief A "reasonable amount of time" to wait for keep-alive responses from the MQTT server.

The MQTT spec states that if a response to a keep-alive request is not received within a "reasonable amount of time", the network connection should be closed. Since the meaning of "reasonable" depends heavily on use case, the amount of time to wait for keep-alive responses is defined by this setting. This setting is also used as the amount of time to wait for a final PUBACK to a QoS 1 PUBLISH message before returning #AWS_IOT_MQTT_RETRY_NO_RESPONSE. See #AwsIotMqttPublishInfo_t for a description of QoS 1 PUBLISH retries.

@configpossible Any positive integer.<br>
@configdefault `1000`

@section AWS_IOT_MQTT_RETRY_MS_CEILING
@brief Controls the maximum [retry interval](@ref AwsIotMqttPublishInfo_t.retryMs) of QoS 1 PUBLISH retransmissions.

QoS 1 PUBLISH retransmissions follow a truncated exponential backoff strategy. The interval of time between retransmissions increases exponentially until @ref AWS_IOT_MQTT_RETRY_MS_CEILING (or the [retransmission limit)](@ref AwsIotMqttPublishInfo_t.retryLimit) is reached, then increases by @ref AWS_IOT_MQTT_RETRY_MS_CEILING until the [retransmission limit](@ref AwsIotMqttPublishInfo_t.retryLimit) is reached.

@see #AwsIotMqttPublishInfo_t for a detailed description of the QoS 1 PUBLISH retransmission strategy.

@configpossible Any positive integer.<br>
@configdefault `60000`

@section AWS_IOT_MQTT_TEST
@brief Set this to `1` to enable test access for the MQTT library.

This setting is used by the [MQTT tests](@ref mqtt_tests) to access the internal `static` functions and variables of the MQTT library. When `1`, it enables the @c \#include directives at the bottom of the [MQTT library source files](@ref lib/source/mqtt). These @c \#include directives include the test access files (located in `tests/mqtt/access`) that interact with the library's internal symbols. Unless the MQTT library is being tested, this setting should be `0`.

@configpossible `0` (test access disabled) or `1` (test access enabled)<br>
@configrecommended `0`<br>
@configdefault `0`

@section AWS_IOT_MQTT_TIMER_EVENT_THRESHOLD_MS
@brief Set the threshold for processing MQTT timer events in the future.

MQTT timer events (such as keep-alive or PUBLISH retry) are sorted by their expiration time and place in a queue. A timer thread processes the events in this queue as each event's expiration time passes.  To conserve memory, all MQTT connections (and therefore, all timer events for an MQTT connection) share a single system timer. The purpose of this setting is to avoid having an MQTT connection's timer expire too often. It allows the timer thread to process timer events before their expiration time <b>if</b> their expiration time is in the near future.

Consider the following timer queue:
@dot
graph timer_event_example
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    subgraph
    {
        rank = same;
        event1[label="Event 1\nExpiration time = NOW"];
        event2[label="Event 2\nExpiration time = NOW + 50"];
        event3[label="Event 3\nExpiration time = NOW + 150"];
    }
    event1 -- event2;
    event2 -- event3;
}
@enddot

If @ref AWS_IOT_MQTT_TIMER_EVENT_THRESHOLD_MS is `100`, then both `Event 1` and `Event 2` will be processed now because their expiration times are within `100` of the current time. Because `Event 3` has an expiration time greater than `100` in the future, it will not be processed now.

@configpossible Any non-negative integer.<br>
@configrecommended This value should be small to avoid premature processing of timer events. In almost no use case should this value be greater than `1000`.<br>
@configdefault `100`

@section AwsIotMqtt_Assert
@brief Assertion function used when @ref AWS_IOT_MQTT_ENABLE_ASSERTS is `1`.

@configpossible Any function with the same signature as the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function.<br>
@configdefault Standard library [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function if @ref AWS_IOT_MQTT_ENABLE_ASSERTS is `1`; otherwise, nothing.

@section mqtt_config_memory Memory allocation
@brief If @ref AWS_IOT_STATIC_MEMORY_ONLY is `1`, then the following functions must be re-implemented for the MQTT library.
- #AwsIotMqtt_MallocConnection <br>
  @copybrief AwsIotMqtt_MallocConnection
- #AwsIotMqtt_FreeConnection <br>
  @copybrief AwsIotMqtt_FreeConnection
- #AwsIotMqtt_MallocMessage <br>
  @copybrief AwsIotMqtt_MallocMessage
- #AwsIotMqtt_FreeMessage <br>
  @copybrief AwsIotMqtt_FreeMessage
- #AwsIotMqtt_MallocOperation <br>
  @copybrief AwsIotMqtt_MallocOperation
- #AwsIotMqtt_FreeOperation <br>
  @copybrief AwsIotMqtt_FreeOperation
- #AwsIotMqtt_MallocSubscription <br>
  @copybrief AwsIotMqtt_MallocSubscription
- #AwsIotMqtt_FreeSubscription <br>
  @copybrief AwsIotMqtt_FreeSubscription
- #AwsIotMqtt_MallocTimerEvent <br>
  @copybrief AwsIotMqtt_MallocTimerEvent
- #AwsIotMqtt_FreeTimerEvent <br>
  @copybrief AwsIotMqtt_FreeTimerEvent
*/
