/**
@mainpage
@anchor provisioning
@brief Library for the Fleet Provisioning feature of AWS IoT.

> AWS IoT provisioning can be used to define a set of remote operations that are sent to and executed on one or more devices connected to AWS IoT.

<span style="float:right;margin-right:4em"> &mdash; <i>Description of Provisioning from [AWS IoT documentation](https://docs.aws.amazon.com/iot/latest/developerguide/iot-provisioning.html)</i></span><br>

This library provides an API based on the [Provisioning APIs available over MQTT](https://docs.aws.amazon.com/iot/latest/developerguide/provisioning-api.html#provisioning-mqtt-api). Features of this library include:
- Fully blocking API functions.
- User-defined callback based relaying of server response to calling application.

@dependencies{provisioning,Provisioning library}
@dot "Provisioning direct dependencies"
digraph provisioning_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        provisioning[label="Provisioning", fillcolor="#cc00ccff"];
        mqtt[label="MQTT", fillcolor="#cc00ccff", URL="@ref mqtt"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        linear_containers[label="List/Queue", URL="@ref linear_containers"];
        logging[label="Logging", URL="@ref logging"];
        static_memory[label="Static memory", URL="@ref static_memory"];
    }
    provisioning -> mqtt;
    provisioning -> logging [label=" if logging enabled", style="dashed"];
    provisioning -> static_memory [label=" if static memory only", style="dashed"];
}
@enddot

Currently, the Provisioning library has the following dependencies:
- The MQTT library for sending the messages that interact with the Provisioning service. See [this page](@ref mqtt_dependencies) for the dependencies of the MQTT library, which are not shown in the graph above.
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_PROVISIONING is not #IOT_LOG_NONE.

In addition to the components above, the Provisioning library also depends on C standard library headers.
*/

/**
@page provisioning_demo Demo
@brief Demonstrates the usage of the Provisioning library.

This demo provides a simple example on using the Provisioning library and working with the AWS IoT Fleet Provisioning feature.

The Provisioning demo establishes an MQTT connection and then, requests a new public-private key pair and certificate by registering a credential handling callback. On receiving the new credentials from the server, the registered callback copies the received certificate ID and certificate ownership token into their buffers(for provisioning later in the demo), and prints the remaining credentials. The demo application then requests provisioning with the store certificate ID and certificate ownership token, and also registers a response handler callback. On receiving the server response to the provisioning request, the registered callback prints the contents of the response.

@section provisioning_demo_setup Demo Setup
@brief How to set up a provisioning template for the Provisioning demo.

Because the Provisioning MQTT API does not support creating a provisioning template, you must create a template for the demo separately. We recommend using AWS CLI to create the template.

1. Create a user for AWS CLI. See steps 1 @ref guide_developer_automated_tests_provisioning for more information.
2. Create a provisioning template for the demo. See steps 2 @ref guide_developer_automated_tests_provisioning for more information.
3. Build and run the demo as described [here](@ref building).

/*-----------------------------------------------------------*/
@endcode

The supported actions are described above. As an example, the command to create a "publish" Job with AWS CLI is below. Replace `UniqueId` with a Job ID that is unique, and `ThingARN` with the ARN of the target Thing.

@code{sh}
aws iot create-job \
        --job-id UniqueId \
        --targets ThingARN \
        --document '{"action":"publish","message":"Hello world!","topic":"provisioningdemo/1"}'
@endcode

This will cause the Provisioning demo to publish the message `Hello world!` on the topic `provisioningdemo/1`. You may view this message by subscribing to the topic in AWS IoT Console.

When the demo finishes with a Job, it will mark the Provisioning as complete. Note that completed Provisioning are not automatically removed from the AWS IoT Console. The following command can be used to remove completed Provisioning. Replace `UniqueId` with the Job ID.

@code{sh}
aws iot delete-job --job-id UniqueId
@endcode

# Demo Structure
The Provisioning demo uses the <i>asynchronous</i> API of the Provisioning library. Most of the demo is run from the NotifyNext callback.

@image html provisioning_demo.png "Provisioning Demo Execution Sequence" width=80%

@note Messages from the Provisioning service (which are sent at MQTT QoS 1) may be received multiple times. The Provisioning NotifyNext callback must be able to handle duplicated Job documents.
*/

/**
@page provisioning_tests Tests
@brief Tests written for the Provisioning library.

The Provisioning tests reside in the `provisioning/test` directory. They are divided into the following subdirectories:
- `system`: Provisioning system tests. These tests require a network connection and AWS IoT credentials. They also need an AWS account and a registered Provisioning Template in the account; see @ref provisioning_system_tests_setup for instructions to configure an AWS account to run these tests. The command line option `-n` may be passed to the test executable to disable these tests.
- `unit`: Provisioning unit tests. These tests do not require a network connection or credentials. These tests use the [MQTT mocks.](@ref mqtt_tests)

See @subpage provisioning_tests_config for configuration settings that change the behavior of the Provisioning system tests. The Provisioning unit tests require no special configuration.

The current Provisioning tests use the [Unity test framework](http://www.throwtheswitch.org/unity/). See @ref building_tests for a guide on running the tests.

@section provisioning_system_tests_setup Setting up Provisioning system tests
@brief How to set up the Provisioning system tests.

@pre The steps below assume basic familiarity with AWS and AWS CLI.

The Provisioning system tests require Provisioning Template to be created with an AWS account. AWS does not provide the functionality to create Provisioning Template using the Device API; therefore, Provisioning will have to be created using another method.

See @ref guide_developer_automated_tests_provisioning for additional setup for running the Provisioning tests on Travis CI.

1. Create an IAM user for the tests. This needs to be done only once. <br>
Follow [this guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html) to create an IAM user for the Provisioning tests.
    - Only <b>programmatic access</b> is required.
    - Save the <b>access key</b> and <b>secret access key</b> for this user.
    - The following policy grants the necessary permissions for this user. Replace `<region>` and `<account>` with your AWS region and account number, respectively; replace `<TemplateName>` with the name of the Provisioning Template that will be created in the next step (step 2).
```
{
    "Version": "2012-10-17",
    "Statement": {
        "Effect": "Allow",
        "Action": [
            "iot:CreateProvisioningTemplate",
            "iot:DeleteProvisioningTemplate",
            "iot:ListProvisioningTemplate"
        ],
        "Resource": [
            "arn:aws:iot:<region>:<account>:provisioningtemplate/<TemplateName>",
        ]
    }
}

2. Create the template resource which will be used for provisioning the demo application. This needs to be done only once. <br>
To create a template, the following AWS CLI command may be used. Replace `TemplateName` with the name of the template that was used in the IAM user's policy in step 1.
```sh
aws iot create-provisioning-template \
        --template-name <TemplateName> \
        --provisioning-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/Admin \
        --template-body  "{\"Parameters\":{\"DeviceLocation\":{\"Type\":\"String\"},\"AWS::IoT::Certificate::Id\":{\"Type\":\"String\"},\"AWS::IoT::Connection::ClientId\":{\"Type\":\"String\"}},\"Mappings\":{\"LocationTable\":{\"Seattle\":{\"LocationUrl\":\"https:\/\/example.aws\"}}},\"Resources\":{\"thing\":{\"Type\":\"AWS::IoT::Thing\",\"Properties\":{\"ThingName\":{\"Fn::Join\":[\"\",[\"ThingPrefix_\",{\"Ref\":\"AWS::IoT::Connection::ClientId\"}]]},\"AttributePayload\":{\"version\":\"v1\",\"serialNumber\":\"serialNumber\"},\"ThingTypeName\":\"lightBulb-versionA\",\"ThingGroups\":[\"v1-lightbulbs\",\"WA\"]},\"OverrideSettings\":{\"AttributePayload\":\"MERGE\",\"ThingTypeName\":\"REPLACE\",\"ThingGroups\":\"DO_NOTHING\"}},\"certificate\":{\"Type\":\"AWS::IoT::Certificate\",\"Properties\":{\"CertificateId\":{\"Ref\":\"AWS::IoT::Certificate::Id\"},\"Status\":\"Active\"},\"OverrideSettings\":{\"Status\":\"REPLACE\"}},\"policy\":{\"Type\":\"AWS::IoT::Policy\",\"Properties\":{\"PolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"iot:Connect\",\"iot:Subscribe\",\"iot:Publish\",\"iot:Receive\"],\"Resource\":\"*\"}]}}}},\"DeviceConfiguration\":{\"FallbackUrl\":\"https:\/\/www.example.com\/test-site\",\"LocationUrl\":{\"Fn::FindInMap\":[\"LocationTable\",{\"Ref\":\"DeviceLocation\"},\"LocationUrl\"]}}}" \
        --enabled 
```
The template used in the above AWS CLI command is specific to the demo application, as the demo application provides named context parameters that needs to be recognized by the template. 
The following is the template passed as a string in the above AWS CLI command.
```
{
  "Parameters": {
    "DeviceLocation": {
      "Type": "String"
    },
    "AWS::IoT::Certificate::Id": {
      "Type": "String"
    },
    "SerialNumber": {
      "Type": "String"
    }
  },
  "Mappings": {
    "LocationTable": {
      "Seattle": {
        "LocationUrl": "https://example.aws"
      }
    }
  },
  "Resources": {
    "thing": {
      "Type": "AWS::IoT::Thing",
      "Properties": {
        "ThingName": {
          "Fn::Join": [
            "",
            [
              "ThingPrefix_",
              {
                "Ref": "SerialNumber"
              }
            ]
          ]
        },
        "AttributePayload": {
          "version": "v1",
          "serialNumber": "serialNumber"
        },
      },
      "OverrideSettings": {
        "AttributePayload": "MERGE",
      }
    },
    "certificate": {
      "Type": "AWS::IoT::Certificate",
      "Properties": {
        "CertificateId": {
          "Ref": "AWS::IoT::Certificate::Id"
        },
        "Status": "Active"
      },
      "OverrideSettings": {
        "Status": "REPLACE"
      }
    },
    "policy": {
      "Type": "AWS::IoT::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iot:Connect",
                "iot:Subscribe",
                "iot:Publish",
                "iot:Receive"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    }
  },
  "DeviceConfiguration": {
    "FallbackUrl": "https://www.example.com/test-site",
    "LocationUrl": {
      "Fn::FindInMap": [
        "LocationTable",
        {
          "Ref": "DeviceLocation"
        },
        "LocationUrl"
      ]
    }
  }
}
```

For more information on provisioning template, refer to [this guide](http://michgre.aka.corp.amazon.com/FoundryDocs/build/AWSIcebreakerDocs/AWSIcebreakerDocs-3.0/RHEL5_64/DEV.STD.PTHREAD/build/server-root/iot/latest/developerguide/provision-wo-cert.html)

3. Set the name of provisioning template, created in step 2, within demo config file for the  AWS_IOT_DEMO_PROVISIONING_TEMPLATE_NAME` #define. Build the demo for the `aws_iot_demo_provisioning` target.

4. When the Provisioning demo is complete, the template it used is no longer needed. Provisioning template can be deleted with the following command, where `TemplateName` is the name of the template that is to be deleted.
```sh
aws iot delete-provisioning-template --template-name <TemplateName>
```
*/

/**
@configpage{provisioning_tests,Provisioning system tests,Test,tests}

@section AWS_IOT_TEST_PROVISIONING_TEMPLATE_NAME
@brief The Template name to use in the Provisioning system tests.

Provisioning Templates are used to facilitate provisioning of devices with AWS IoT. <b>No default value is provided for Template Names, so this constant must be defined.</b> In addition to the Thing Name, AWS IoT credentials ([root CA certificate](@ref IOT_TEST_ROOT_CA), [client certificate](@ref IOT_TEST_CLIENT_CERT), and [client certificate private key](@ref IOT_TEST_PRIVATE_KEY)) must be provided to run the system tests. The [AWS IoT policy](https://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html) must also be properly configured.

@configpossible A string representing an AWS IoT Fleet Provisioning Template Name.

@section provisioning_IOT_TEST_MQTT_SHORT_KEEPALIVE_INTERVAL_S IOT_TEST_MQTT_SHORT_KEEPALIVE_INTERVAL_S
@brief The keep-alive interval to use in the Provisioning system tests.

MQTT PINGREQ packets will be sent at this interval.

@configpossible Any positive integer. <br>
@configrecommended This value should be the shortest keep-alive interval supported by the connection. <br>
@configdefault `30`
*/

/**
@configpage{provisioning,Provisioning library}

@section AWS_IOT_PROVISIONING_ENABLE_ASSERTS
@brief Set this to `1` to perform sanity checks when using the Provisioning library.

Asserts are useful for debugging, but should be disabled in production code. If this is set to `1`, @ref AwsIotProvisioning_Assert can be defined to set the assertion function; otherwise, the @ref Iot_DefaultAssert will be used.

@configpossible `0` (asserts disabled) or `1` (asserts enabled)<br>
@configrecommended `1` when debugging; `0` in production code.<br>
@configdefault `0`

@section AWS_IOT_PROVISIONING_DEFAULT_MQTT_TIMEOUT_MS
@brief Set the default timeout (in milliseconds) for [MQTT library](@ref mqtt_functions) called by the Provisioning library.

If the `mqttTimeout` argument of @ref provisioning_function_init is `0`, the Provisioning library uses this setting for MQTT timeouts. This timeout is passed to functions such as @ref mqtt_function_subscribesync, @ref mqtt_function_unsubscribesync, and @ref mqtt_function_publishsync to limit amount of time an MQTT function may block.

@configpossible Any positive integer.<br>
@configrecommended This setting must be at least the network round-trip time, as an MQTT packet must be sent to the AWS IoT server and a response must be received. The recommended minimum value is `500`.<br>
@configdefault `5000`

@section AWS_IOT_LOG_LEVEL_PROVISIONING
@brief Set the log level of the Provisioning library.

Log messages from the Provisioning library at or below this setting will be printed.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #IOT_LOG_NONE.

@section AwsIotProvisioning_Assert
@brief Assertion function used when @ref AWS_IOT_PROVISIONING_ENABLE_ASSERTS is `1`.

@configpossible Any function with the same signature as the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function.<br>
@configdefault @ref Iot_DefaultAssert if @ref AWS_IOT_PROVISIONING_ENABLE_ASSERTS is `1`; otherwise, nothing. If @ref Iot_DefaultAssert is not defined when asserts are enabled, the Provisioning library will fail to build.

@section provisioning_config_memory Memory allocation
@brief The following functions may be re-implemented for the Provisioning library.
- #AwsIotProvisioning_MallocPayload <br>
  @copybrief AwsIotProvisioning_MallocPayload
- #AwsIotProvisioning_FreePayload <br>
  @copybrief AwsIotProvisioning_FreePayload
- #AwsIotProvisioning_MallocString <br>
  @copybrief AwsIotProvisioning_MallocString
- #AwsIotProvisioning_FreeString <br>
  @copybrief AwsIotProvisioning_FreeString
- #AwsIotProvisioning_MallocDeviceConfigurationList <br>
  @copybrief AwsIotProvisioning_MallocDeviceConfigurationList
- #AwsIotProvisioning_FreeDeviceConfigurationList <br>
  @copybrief AwsIotProvisioning_FreeDeviceConfigurationList

If a custom implementation is not set for a Provisioning memory allocation function, @ref Iot_DefaultMalloc will be used. If @ref Iot_DefaultMalloc are not set, the Provisioning library will fail to build.
*/
