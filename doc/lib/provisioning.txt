/**
@mainpage
@anchor provisioning
@brief Library for the Fleet Provisioning feature of AWS IoT.

> When you use AWS IoT fleet provisioning, AWS IoT can generate and securely deliver device certificates and private keys to your devices when they connect to AWS IoT for the first time.

<span style="float:right;margin-right:4em"> &mdash; <i>Description of the Fleet Provisioning feature from [AWS IoT documentation](http://michgre.aka.corp.amazon.com/FoundryDocs/build/AWSIcebreakerDocs/AWSIcebreakerDocs-3.0/RHEL5_64/DEV.STD.PTHREAD/build/server-root/iot/latest/developerguide/provision-wo-cert.html)</i></span><br>

This library provides an API based on the [Fleet Provisioning APIs available over MQTT](http://michgre.aka.corp.amazon.com/FoundryDocs/build/AWSIcebreakerDocs/AWSIcebreakerDocs-3.0/RHEL5_64/DEV.STD.PTHREAD/build/server-root/iot/latest/developerguide/provision-wo-cert.html#fleet-provision-api). Features of this library include:
- Synchronous API functions.
- User-defined callbacks for handling responses.

@dependencies{provisioning,Provisioning library}
@dot "Provisioning direct dependencies"
digraph provisioning_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        provisioning[label="Provisioning", fillcolor="#cc00ccff"];
        mqtt[label="MQTT", fillcolor="#cc00ccff", URL="@ref mqtt"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        static_memory[label="Static memory", URL="@ref static_memory"];
        logging[label="Logging", URL="@ref logging"];
    }
    provisioning -> mqtt;
    provisioning -> logging [label=" if logging enabled", style="dashed"];
    provisioning -> static_memory [label=" if static memory only", style="dashed"];
}
@enddot

Currently, the Provisioning library has the following dependencies:
- The MQTT library for sending the messages that interact with the AWS IoT Core for the Fleet Provisioning feature. See [this page](@ref mqtt) for more information on the MQTT library (and [its dependencies](@ref mqtt_dependencies))
- The static memory library will be used if the library is built with #IOT_STATIC_MEMORY_ONLY flag set as `1`
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_PROVISIONING is not #IOT_LOG_NONE.

In addition to the components above, the Provisioning library also depends on C standard libraries.
*/

/**
@page provisioning_design Design
@brief Architecture behind the Provisioning library.

Provisioning library uses MQTT subscriptions and MQTT publishes for communicating with the AWS IoT Core service for the Fleet Provisioning feature. Each of the operations within the library ("CreateKeysAndCertificate", "RegisterThing") uses MQTT two subscriptions, one for accepted topic and other for rejected topic, to obtain the server response of the MQTT publish request it makes for the specific operation. Each of the operations also require a user-callback for handling the server response. The callbacks will be run in MQTT's taskpool context.

@section CreateKeysAndCertificate_Design CreateKeysAndCertificate Design
@image html provisioning_createkeysandcertificate_design.png width=100%

*/

/**
@page provisioning_demo Demo
@brief Demonstrates the usage of the Provisioning library.

This demo provides a simple example on using the Provisioning library and working with the AWS IoT Fleet Provisioning feature.

The Provisioning demo establishes an MQTT connection and then, requests a new private key and associated certificate by providing a callback to the credential generating library function. On receiving the new credentials from the server, the registered callback copies the received certificate ID and certificate ownership token into separate buffers (that are be used by the demo application later for provisioning), and prints the remaining credentials. The demo application then requests provisioning with the received certificate ID and certificate ownership token, and also registers a response handler callback. On receiving the server response to the provisioning request, the registered callback prints the contents of the response.

@image html provisioning_demo.png "Provisioning Demo Workflow" width=80%

@section provisioning_demo_setup Demo Setup
@brief How to set up a fleet provisioning template for the Provisioning demo.

The demo assumes that a fleet provisioning template that takes parameters (including one for "SerialNumber") from the device has been created in the account that will be used for connecting to AWS IoT Core. 
To create a template, we recommend using AWS CLI to create the template. (For more information on fleet provisioning templates, refer [here]((http://michgre.aka.corp.amazon.com/FoundryDocs/build/AWSIcebreakerDocs/AWSIcebreakerDocs-3.0/RHEL5_64/DEV.STD.PTHREAD/build/server-root/iot/latest/developerguide/provision-wo-cert.html))

1. Create a user for AWS CLI. See steps 1 @ref guide_developer_automated_tests_jobs for more information.
2. Create a provisioning template for the demo. See steps 2 @ref provisioning_system_tests_setup for more information.
3. Build and run the demo as described [here](@ref building).

See @subpage provisioning_demo_config for configuration settings that change the behavior of the demo.

*/

/**
@configpage{provisioning_demo,Provisioning demo,Demo,demos}

@section AWS_IOT_DEMO_PROVISIONING_TEMPLATE_NAME
@brief The name of the provisioning template associated with the AWS IoT account that the demo will use.

The Provisioning demo requests the AWS IoT Core service to use the defined template name to demonstrate the fleet provisioning feature.

@configpossible Any string <br>
@configdefault `""` (empty string)

@section AWS_IOT_DEMO_PROVISIONING_PARAMETER_SERIAL_NUMBER_NAME
@brief The name of the serial number parameter that will be sent as part of provisioning request payload by the demo.

The fleet provisioning template, `AWS_IOT_DEMO_PROVISIONING_TEMPLATE_NAME`, should be configured to accept the parameter. (The default template generated by AWS IoT Console uses "SerialNumber" to generate Thing resource name on provisioning device.)
It is recommended to use serial number (or an equivalent unique device identifier) to provide as parameter to the AWS IoT Core service for provisioning of the device.

@configpossible Any string that can be accepted by the template.
@configdefault `"SERIAL_NUMBER"`

@section AWS_IOT_DEMO_PROVISIONING_PARAMETER_SERIAL_NUMBER_VALUE
@brief The value of the parameter associated to `AWS_IOT_DEMO_PROVISIONING_PARAMETER_SERIAL_NUMBER_NAME`.

@configpossible Any string value<br>
@configdefault `""` (empty string)

@section AWS_IOT_DEMO_PROVISIONING_PARAMETER_2_NAME
@brief The name of the additional parameter that will be sent as part of provisioning request payload by the demo.

An additional parameter can be sent to AWS IoT Core service to utilize for _evaluating_ and sending back device configuration in the response. In that case, make sure that the fleet provisioning template is configured to accept the parameter.

@configpossible Any string that can be accepted by the template.
@configdefault `""`

@section AWS_IOT_DEMO_PROVISIONING_PARAMETER_2_VALUE
@brief The value of the parameter associated to `AWS_IOT_DEMO_PROVISIONING_PARAMETER_2_NAME`.

@configpossible Any string value<br>
@configdefault `""` (empty string)

*/

/**
@page provisioning_tests Tests
@brief Tests written for the Provisioning library.

The Provisioning tests reside in the `provisioning/test` directory. They are divided into the following subdirectories:
- `system`: Provisioning system tests. These tests require a network connection and AWS IoT credentials. They also need an AWS account and a registered Provisioning Template in the account; see @ref provisioning_system_tests_setup for instructions to configure an AWS account to run these tests. The command line option `-n` may be passed to the test executable to disable these tests.
- `unit`: Provisioning unit tests. These tests do not require a network connection or credentials. These tests use the [MQTT mocks.](@ref mqtt_tests)

See @subpage provisioning_tests_config for configuration settings that change the behavior of the Provisioning system tests. The Provisioning unit tests require no special configuration.

The current Provisioning tests use the [Unity test framework](http://www.throwtheswitch.org/unity/). See @ref building_tests for a guide on running the tests.

@section provisioning_system_tests_setup Setting up Provisioning system tests
@brief How to set up the Provisioning system tests.

@pre The steps below assume basic familiarity with AWS and AWS CLI.

The Provisioning system tests require Provisioning Template to be created with an AWS account. AWS does not provide the functionality to create Provisioning Template using the Device API; therefore, Provisioning will have to be created using another method.

See @ref guide_developer_automated_tests_jobs for additional setup for running the Provisioning tests on Travis CI.

1. Create an IAM user for the tests. This needs to be done only once. <br>
Follow [this guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html) to create an IAM user for the Provisioning tests.
    - Only <b>programmatic access</b> is required.
    - Save the <b>access key</b> and <b>secret access key</b> for this user.
    - The following policy grants the necessary permissions for this user. Replace `<region>` and `<account>` with your AWS region and account number, respectively; replace `<TemplateName>` with the name of the Provisioning Template that will be created in the next step (step 2).
```
{
    "Version": "2012-10-17",
    "Statement": {
        "Effect": "Allow",
        "Action": [
            "iot:CreateProvisioningTemplate",
            "iot:DeleteProvisioningTemplate",
            "iot:ListProvisioningTemplate"
        ],
        "Resource": [
            "arn:aws:iot:<region>:<account>:provisioningtemplate/<TemplateName>",
        ]
    }
}
```

2. Create the template resource which will be used for provisioning the demo application. This needs to be done only once. <br>
To create a template, the following AWS CLI command may be used. Replace `TemplateName` with the name of the template that was used in the IAM user's policy in step 1.
```sh
aws iot create-provisioning-template \
        --template-name <TemplateName> \
        --provisioning-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/Admin \
        --template-body  "{\"Parameters\":{\"DeviceLocation\":{\"Type\":\"String\"},\"AWS::IoT::Certificate::Id\":{\"Type\":\"String\"},\"AWS::IoT::Connection::ClientId\":{\"Type\":\"String\"}},\"Mappings\":{\"LocationTable\":{\"Seattle\":{\"LocationUrl\":\"https:\/\/example.aws\"}}},\"Resources\":{\"thing\":{\"Type\":\"AWS::IoT::Thing\",\"Properties\":{\"ThingName\":{\"Fn::Join\":[\"\",[\"ThingPrefix_\",{\"Ref\":\"AWS::IoT::Connection::ClientId\"}]]},\"AttributePayload\":{\"version\":\"v1\",\"serialNumber\":\"serialNumber\"},\"ThingTypeName\":\"lightBulb-versionA\",\"ThingGroups\":[\"v1-lightbulbs\",\"WA\"]},\"OverrideSettings\":{\"AttributePayload\":\"MERGE\",\"ThingTypeName\":\"REPLACE\",\"ThingGroups\":\"DO_NOTHING\"}},\"certificate\":{\"Type\":\"AWS::IoT::Certificate\",\"Properties\":{\"CertificateId\":{\"Ref\":\"AWS::IoT::Certificate::Id\"},\"Status\":\"Active\"},\"OverrideSettings\":{\"Status\":\"REPLACE\"}},\"policy\":{\"Type\":\"AWS::IoT::Policy\",\"Properties\":{\"PolicyDocument\":{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"iot:Connect\",\"iot:Subscribe\",\"iot:Publish\",\"iot:Receive\"],\"Resource\":\"*\"}]}}}},\"DeviceConfiguration\":{\"FallbackUrl\":\"https:\/\/www.example.com\/test-site\",\"LocationUrl\":{\"Fn::FindInMap\":[\"LocationTable\",{\"Ref\":\"DeviceLocation\"},\"LocationUrl\"]}}}" \
        --enabled 
```
The template used in the above AWS CLI command is specific to the demo application, as the demo application provides named context parameters that needs to be recognized by the template. 
The following is the template passed as a string in the above AWS CLI command.
```
{
  "Parameters": {
    "DeviceLocation": {
      "Type": "String"
    },
    "AWS::IoT::Certificate::Id": {
      "Type": "String"
    },
    "SerialNumber": {
      "Type": "String"
    }
  },
  "Mappings": {
    "LocationTable": {
      "Seattle": {
        "LocationUrl": "https://example.aws"
      }
    }
  },
  "Resources": {
    "thing": {
      "Type": "AWS::IoT::Thing",
      "Properties": {
        "ThingName": {
          "Fn::Join": [
            "",
            [
              "ThingPrefix_",
              {
                "Ref": "SerialNumber"
              }
            ]
          ]
        },
        "AttributePayload": {
          "version": "v1",
          "serialNumber": "serialNumber"
        },
      },
      "OverrideSettings": {
        "AttributePayload": "MERGE",
      }
    },
    "certificate": {
      "Type": "AWS::IoT::Certificate",
      "Properties": {
        "CertificateId": {
          "Ref": "AWS::IoT::Certificate::Id"
        },
        "Status": "Active"
      },
      "OverrideSettings": {
        "Status": "REPLACE"
      }
    },
    "policy": {
      "Type": "AWS::IoT::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iot:Connect",
                "iot:Subscribe",
                "iot:Publish",
                "iot:Receive"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    }
  },
  "DeviceConfiguration": {
    "FallbackUrl": "https://www.example.com/test-site",
    "LocationUrl": {
      "Fn::FindInMap": [
        "LocationTable",
        {
          "Ref": "DeviceLocation"
        },
        "LocationUrl"
      ]
    }
  }
}
```

For more information on provisioning template, refer to [this guide](http://michgre.aka.corp.amazon.com/FoundryDocs/build/AWSIcebreakerDocs/AWSIcebreakerDocs-3.0/RHEL5_64/DEV.STD.PTHREAD/build/server-root/iot/latest/developerguide/provision-wo-cert.html)

3. Set the name of provisioning template, created in step 2, within demo config file for the  AWS_IOT_DEMO_PROVISIONING_TEMPLATE_NAME` #define. Build the demo for the `aws_iot_demo_provisioning` target.

4. When the Provisioning demo is complete, the template it used is no longer needed. Provisioning template can be deleted with the following command, where `TemplateName` is the name of the template that is to be deleted.
```sh
aws iot delete-provisioning-template --template-name <TemplateName>
```
*/

/**
@configpage{provisioning_tests,Provisioning system tests,Test,tests}

@section AWS_IOT_TEST_PROVISIONING_TEMPLATE_NAME
@brief The Template name to use in the Provisioning system tests.

Provisioning Templates are used to facilitate provisioning of devices with AWS IoT Core. <b>No default value is provided for Template Names, so this constant must be defined.</b> In addition to the Template Name, AWS IoT credentials ([root CA certificate](@ref IOT_TEST_ROOT_CA), [client certificate](@ref IOT_TEST_CLIENT_CERT), and [client certificate private key](@ref IOT_TEST_PRIVATE_KEY)) must be provided to run the system tests. The [AWS IoT policy](https://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html) must also be properly configured.

@configpossible A string representing an AWS IoT Fleet Provisioning Template Name.

@section AWS_IOT_TEST_PROVISIONING_TEMPLATE_PARAMETERS
@brief The list of parameters to pass as device context in the Provisioning system tests.

Template parameters are used to provide device context of device when requesting provisioning using the AWS_IOT_TEST_PROVISIONING_TEMPLATE_NAME template. 

@configpossible A C-style list initialization of parameters.
@configrecommended A "SerialNumber" parameter required by the the default Provisioning Template created by AWS IoT Console, if creating Thing resource as part of provisioning.
@configdefault A "SerialNumber" parameter name without the value. The parameter value should to be specified.
@code{c}
 {                                                              \
        {                                                       \
            .pParameterKey = "SerialNumber",                    \
            .parameterKeyLength = sizeof( "SerialNumber" ) - 1, \
            .pParameterValue = "",                              \
            .parameterValueLength = 0                           \
        }                                                       \
    }
@endcode

*/

/**
@configpage{provisioning,Provisioning library}

@section AWS_IOT_PROVISIONING_ENABLE_ASSERTS
@brief Set this to `1` to perform sanity checks when using the Provisioning library.

Asserts are useful for debugging, but should be disabled in production code. If this is set to `1`, @ref AwsIotProvisioning_Assert can be defined to set the assertion function; otherwise, the @ref Iot_DefaultAssert will be used.

@configpossible `0` (asserts disabled) or `1` (asserts enabled)<br>
@configrecommended `1` when debugging; `0` in production code.<br>
@configdefault `0`

@section AWS_IOT_PROVISIONING_DEFAULT_MQTT_TIMEOUT_MS
@brief Set the default timeout (in milliseconds) for [MQTT library](@ref mqtt_functions) called by the Provisioning library.

If the `mqttTimeout` argument of @ref provisioning_function_init is `0`, the Provisioning library uses this setting for MQTT timeouts. This timeout is passed to functions such as @ref mqtt_function_subscribesync, and @ref mqtt_function_publishsync to limit amount of time an MQTT function may block.

@configpossible Any positive integer.<br>
@configrecommended This setting must be at least the network round-trip time, as an MQTT packet must be sent to the AWS IoT server and a response must be received. The recommended minimum value is `500`.<br>
@configdefault `5000`

@section AWS_IOT_LOG_LEVEL_PROVISIONING
@brief Set the log level of the Provisioning library.

Log messages from the Provisioning library at or below this setting will be printed.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #IOT_LOG_NONE.

@section AwsIotProvisioning_Assert
@brief Assertion function used when @ref AWS_IOT_PROVISIONING_ENABLE_ASSERTS is `1`.

@configpossible Any function with the same signature as the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function.<br>
@configdefault @ref Iot_DefaultAssert if @ref AWS_IOT_PROVISIONING_ENABLE_ASSERTS is `1`; otherwise, nothing. If @ref Iot_DefaultAssert is not defined when asserts are enabled, the Provisioning library will fail to build.

@section provisioning_config_memory Memory allocation
@brief The following functions may be re-implemented for the Provisioning library.
- #AwsIotProvisioning_MallocPayload <br>
  @copybrief AwsIotProvisioning_MallocPayload
- #AwsIotProvisioning_FreePayload <br>
  @copybrief AwsIotProvisioning_FreePayload
- #AwsIotProvisioning_MallocString <br>
  @copybrief AwsIotProvisioning_MallocString
- #AwsIotProvisioning_FreeString <br>
  @copybrief AwsIotProvisioning_FreeString
- #AwsIotProvisioning_MallocDeviceConfigurationList <br>
  @copybrief AwsIotProvisioning_MallocDeviceConfigurationList
- #AwsIotProvisioning_FreeDeviceConfigurationList <br>
  @copybrief AwsIotProvisioning_FreeDeviceConfigurationList

If a custom implementation is not set for a Provisioning memory allocation function, @ref Iot_DefaultMalloc will be used. If @ref Iot_DefaultMalloc are not set, the Provisioning library will fail to build.
*/
