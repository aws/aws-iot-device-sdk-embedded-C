/**
@mainpage
@anchor platform
@brief The platform layer provides portability across different operating systems. <br><br>

All system calls (including networking) used in the AWS IoT libraries go through a lightweight platform layer. The functions of the platform layer are intended to be easily implementable on a wide variety of operating systems. The current platform layer has the following components:
- @ref platform_clock <br>
  @copybrief platform_clock
- @ref platform_static_memory <br>
  @copybrief platform_static_memory
- @ref platform_threads <br>
  @copybrief platform_threads
- @ref platform_network <br>
  @copybrief platform_network

All of the functions in each component will need to be implemented to port the libraries to a new platform. Currently, implementations exist for the following platforms:
Component                   | Supported platforms
---------                   | -------------------
@ref platform_clock         | [POSIX](https://en.wikipedia.org/wiki/POSIX)
@ref platform_static_memory | [POSIX](https://en.wikipedia.org/wiki/POSIX)
@ref platform_threads       | [POSIX](https://en.wikipedia.org/wiki/POSIX)
@ref platform_network       | [Berkeley sockets](https://en.wikipedia.org/wiki/Berkeley_sockets) + [OpenSSL](https://en.wikipedia.org/wiki/OpenSSL) + [POSIX](https://en.wikipedia.org/wiki/POSIX) <br> [Amazon FreeRTOS Secure Sockets](https://docs.aws.amazon.com/freertos/latest/userguide/secure-sockets.html)
*/

/**
@page platform_clock Clock
@brief @copybrief aws_iot_clock.h

The platform clock component provides other libraries with functions relating to timers and clocks. It interfaces directly with the operation system to provide:
- Clocks for reading the current time.
- Timers that create a notification thread when they expire.

@dependencies{platform_clock,platform clock component}
@dot "Clock direct dependencies"
digraph clock_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph { rank=min; logging[label="Logging", fillcolor="#aed8a9ff" URL="@ref logging"]; }
    subgraph
    {
        platform_clock[label="Clock", fillcolor="#e89025ff"];
    }
    subgraph
    {
        rank = same;
        rankdir = LR;
        operating_system[label="Operating system", fillcolor="#999999ff"]
        standard_library[label="Standard library\nstdbool, stddef, stdint", fillcolor="#d15555ff"];
    }
    platform_clock -> operating_system;
    platform_clock -> standard_library;
    platform_clock -> logging [label=" if logging enabled", style="dashed"];
}
@enddot

Currently, the platform clock component has the following dependencies:
- The operating system must provide the necessary APIs to implement the clock component's functions.
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_PLATFORM is not @ref AWS_IOT_LOG_NONE.
*/

/**
@page platform_network Networking
@brief @copybrief aws_iot_network.h

The platform networking component provides other libraries with functions for managing network connections. It interfaces directly with the operating system to provide:
- Functions for opening and closing network connections; function for sending and receiving data.
- Functions for securing network connections.

@dependencies{platform_network,platform networking component}
@dot "Networking direct dependencies"
digraph network_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph { rank=min; logging[label="Logging", fillcolor="#aed8a9ff", URL="@ref logging"]; }
    subgraph
    {
        rank = same;
        platform_network[label="Networking", fillcolor="#e89025ff"];
        platform_threads[label="Thread management", fillcolor="#e89025ff", URL="@ref platform_threads"];
    }
    subgraph
    {
        rank = same;
        rankdir = LR;
        operating_system[label="Operating system", fillcolor="#999999ff"];
        security_library[label="Security library", fillcolor="#999999ff"];
        standard_library[label="Standard library", fillcolor="#d15555ff"];
    }
    platform_network -> platform_threads;
    platform_network -> operating_system;
    platform_network -> security_library [label=" secured connection", style="dashed"];
    platform_network -> standard_library;
    platform_network -> logging [label=" if logging enabled", style="dashed"];
    security_library -> operating_system;
}
@enddot

Currently, the networking component has the following dependencies:
- The operating system must provide the necessary networking APIs, such as a sockets API.
- A third-party security library is needed to encrypt secured connections.
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_PLATFORM is not @ref AWS_IOT_LOG_NONE.
*/

/**
@page platform_static_memory Static Memory
@brief @copybrief aws_iot_static_memory.h

The platform static memory component provides statically-allocated buffers that are used instead of dynamic memory allocation when @ref AWS_IOT_STATIC_MEMORY_ONLY is `1`. Using static memory only <b>does not guarantee that memory allocation will always succeed</b>; it's possible for all statically-allocated buffers to be in-use. However, static memory only <b>can guarantee the availability of <i>at least</i> a certain amount of resources</b>. Because space must be reserved for statically-allocated buffers, binaries compiled with static memory only will be larger.

@section platform_static_memory_types Types of buffers
@brief The types of statically-allocated buffers provided by the static memory component.

@subsection platform_static_memory_types_messagebuffers Message buffers
Message buffers are fixed-size buffers used for strings, such as log messages or bytes transmitted over a network. Their size and number can be configured with the constants @ref AWS_IOT_MESSAGE_BUFFERS (number) and @ref AWS_IOT_MESSAGE_BUFFER_SIZE (size of each message buffer). Message buffers may be used by any library, and are analogous to the generic buffers allocated by [malloc](http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html) (though all message buffers are the same size).

@subsection platform_static_memory_mqtt MQTT static buffers
@brief Statically-allocated buffers used by the [MQTT library](@ref mqtt).

@subsubsection platform_static_memory_types_mqttconnections Connections
MQTT connections correspond to a statically-allocated MQTT session between a single client and server. In static memory mode, the number of simultaneous, active MQTT connections is controlled by the constant @ref AWS_IOT_MQTT_CONNECTIONS.

@subsubsection platform_static_memory_types_mqttoperations Operations
MQTT operations correspond to in-progress requests between a client and the MQTT server, such as CONNECT, PUBLISH, or publish acknowledgement (PUBACK). In static memory mode, the number of simultaneous, active MQTT operations is controlled by the constant @ref AWS_IOT_MQTT_MAX_IN_PROGRESS_OPERATIONS.

@subsubsection platform_static_memory_types_mqtttimerevents Timer events
MQTT timer events store data on operations that require responses within a certain timeout: PINGREQ and QoS 1 PUBLISH. In static memory mode, the number of simultaneous, active MQTT timer events is controlled by the constant @ref AWS_IOT_MQTT_MAX_IN_PROGRESS_OPERATIONS.

@subsubsection platform_static_memory_types_mqttsubscriptions Subscriptions
MQTT subscriptions store records on callbacks registered for MQTT topic filters. In static memory mode, the number of simultaneous, active MQTT subscriptions (across all connections) is controlled by the constant @ref AWS_IOT_MQTT_SUBSCRIPTIONS.

@subsection platform_static_memory_shadow Shadow static buffers
@brief Statically-allocated buffers used by the [Shadow library](@ref shadow).

@subsubsection platform_static_memory_types_shadowoperations Operations
Shadow operations correspond to in-progress Shadow [DELETE](@ref shadow_function_delete), [GET](@ref shadow_function_get), or [UPDATE](@ref shadow_function_update) operations. In static memory mode, the number of simultaneous, active Shadow operations is controlled by the constant @ref AWS_IOT_SHADOW_MAX_IN_PROGRESS_OPERATIONS.

@subsubsection platform_static_memory_types_shadowsubscriptions Subscriptions
A Shadow subscriptions object groups MQTT subscriptions for a Thing. Shadow operations require pairs of subscriptions to determine their status (i.e. `/accepted` or `/rejected`); these subscriptions (as well as subscriptions for Shadow callbacks) are tracked by a Shadow subscriptions object. In static memory mode, the number of simultaneous, active Shadow subscriptions is controlled by the constant @ref AWS_IOT_SHADOW_SUBSCRIPTIONS.

@dependencies{platform_static_memory,platform static memory component}
@dot "Static memory direct dependencies"
digraph static_memory_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    platform_static_memory[label="Static memory", fillcolor="#e89025ff"];
    subgraph
    {
        rank = same;
        operating_system[label="Operating system", fillcolor="#999999ff"]
        standard_library[label="Standard library\nstdbool, stddef, string", fillcolor="#d15555ff"];
    }
    platform_static_memory -> operating_system;
    platform_static_memory -> standard_library;
}
@enddot

Currently, the platform static memory component has the following dependencies:
- The operating system must provide a mechanism to implement critical sections.
*/

/**
@page platform_threads Thread Management
@brief @copybrief aws_iot_threads.h

The platform thread management component provides other libraries with functions relating to threading and synchronization. It interfaces directly with the operating system to provide:
- A function to create new threads.
- Synchronization mechanisms such as [mutexes](@ref AwsIotMutex_t) and [counting semaphores](@ref AwsIotSemaphore_t).

@dependencies{platform_threads,platform thread management component}
@dot "Thread management direct dependencies"
digraph threads_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph { rank=min; logging[label="Logging", fillcolor="#aed8a9ff" URL="@ref logging"]; }
    subgraph
    {
        platform_threads[label="Thread management", fillcolor="#e89025ff"];
    }
    subgraph
    {
        rank = same;
        operating_system[label="Operating system", fillcolor="#999999ff"]
        standard_library[label="Standard library\nstdbool, stddef, stdint", fillcolor="#d15555ff"];
    }
    platform_threads -> operating_system;
    platform_threads -> standard_library;
    platform_threads -> logging [label=" if logging enabled", style="dashed"];
}
@enddot

Currently, the platform thread management component has the following dependencies:
- The operating system must provide the necessary APIs to implement the [thread management functions](@ref platform_threads_functions).
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_PLATFORM is not @ref AWS_IOT_LOG_NONE.
*/

/**
@configpage{platform,platform layer}

@section AWS_IOT_LOG_LEVEL_PLATFORM
@brief Set the log level of all platform components except the [networking component](@ref platform_network).

This setting overrides @ref AWS_IOT_LOG_LEVEL_GLOBAL for the platform layer components that it affects. All log messages with a level at or below this setting will be printed. The [platform networking component](@ref platform_network) is generally more verbose than others, so its logging is controlled separately by @ref AWS_IOT_LOG_LEVEL_NETWORK.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref AWS_IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #AWS_IOT_LOG_NONE.

@section AWS_IOT_LOG_LEVEL_NETWORK
@brief Set the log level of the [platform networking component](@ref platform_network).

This setting overrides @ref AWS_IOT_LOG_LEVEL_GLOBAL for the [platform networking component](@ref platform_network). All log messages with a level at or below this setting will be printed. See @ref AWS_IOT_LOG_LEVEL_PLATFORM to set the log level of other platform components.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref AWS_IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #AWS_IOT_LOG_NONE.

@section AWS_IOT_MUTEX_TYPE
@brief Set the type used to represent mutexes.

@copydetails AwsIotMutex_t

@configpossible Any C data type.<br>
@configdefault No default value is provided, but this setting will be automatically configured during build.

@section AWS_IOT_SEMAPHORE_TYPE
@brief Set the type used to represent semaphores.

@copydetails AwsIotSemaphore_t

@configpossible Any C data type.<br>
@configdefault No default value is provided, but this setting will be automatically configured during build.

@section AWS_IOT_TIMER_TYPE
@brief Set the type used to represent timers.

@copydetails AwsIotTimer_t

@configpossible Any C data type.<br>
@configdefault No default value is provided, but this setting will be automatically configured during build.

@section AWS_IOT_MESSAGE_BUFFERS
@brief The number of statically-allocated [message buffers](@ref platform_static_memory_types_messagebuffers). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see @ref platform_static_memory_types_messagebuffers

@configpossible Any positive integer. <br>
@configdefault `8`

@section AWS_IOT_MESSAGE_BUFFER_SIZE
@brief The size (in bytes) of each statically-allocated [message buffer](@ref platform_static_memory_types_messagebuffers). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see @ref platform_static_memory_types_messagebuffers

@configpossible Any positive integer. <br>
@configdefault `1024`

@section AWS_IOT_MQTT_CONNECTIONS
@brief The number of statically-allocated [MQTT connections](@ref platform_static_memory_types_mqttconnections). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see [MQTT connections](@ref platform_static_memory_types_mqttconnections)

@configpossible Any positive integer. <br>
@configdefault `1`

@section AWS_IOT_MQTT_MAX_IN_PROGRESS_OPERATIONS
@brief The number of statically-allocated [MQTT operations](@ref platform_static_memory_types_mqttoperations). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see [In-progress MQTT operations](@ref platform_static_memory_types_mqttoperations)

@configpossible Any positive integer. <br>
@configdefault `10`

@section AWS_IOT_MQTT_SUBSCRIPTIONS
@brief The number of statically-allocated [MQTT subscriptions](@ref platform_static_memory_types_mqttsubscriptions). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see [MQTT subscriptions](@ref platform_static_memory_types_mqttsubscriptions)

@configpossible Any positive integer. <br>
@configdefault `8`

@section AWS_IOT_SHADOW_MAX_IN_PROGRESS_OPERATIONS
@brief The number of statically-allocated [Shadow operations](@ref platform_static_memory_types_shadowoperations). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see [In-progress Shadow operations](@ref platform_static_memory_types_shadowoperations)

@configpossible Any positive integer. <br>
@configdefault `10`

@section AWS_IOT_SHADOW_SUBSCRIPTIONS
@brief The number of statically-allocated [Shadow subscriptions](@ref platform_static_memory_types_shadowsubscriptions). This setting has no effect if @ref AWS_IOT_STATIC_MEMORY_ONLY is `0`.

@see [Shadow subscriptions objects](@ref platform_static_memory_types_shadowsubscriptions)

@configpossible Any positive integer. <br>
@configdefault `2`

@section platform_config_memory Memory allocation
@brief Memory allocation function overrides for the platform layer.

Some platform layers are not affected by @ref AWS_IOT_STATIC_MEMORY_ONLY. Currently, the following platform clock implementations require memory allocation:
- [POSIX](@ref aws_iot_clock_posix.c) <br>
  This implementation is not affected by @ref AWS_IOT_STATIC_MEMORY_ONLY. However, its memory allocation functions may be overridden by setting the following constants. All memory allocation functions must have the same signatures as [malloc](http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html) and [free](http://pubs.opengroup.org/onlinepubs/9699919799/functions/free.html).
  - #AwsIotClock_Malloc and #AwsIotClock_Free
  - #AwsIotThreads_Malloc and #AwsIotThreads_Free.
  - #AwsIotNetwork_Malloc and #AwsIotNetwork_Free.

@section platform_config_posixheaders POSIX headers
@brief The POSIX platform layer allows the standard POSIX header includes to be overridden. Overrides only affect the POSIX platform layer.

Any substitute headers are expected to provide the same functionality as the standard POSIX headers. The POSIX header overrides should only be used if the system's headers do not follow the standard names for POSIX headers. The POSIX headers may be overridden by defining the following settings:
Standard name | Setting
------------- | -------
[errno.h](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html) | `POSIX_ERRNO_HEADER`
[limits.h](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html) | `POSIX_LIMITS_HEADER`
[pthread.h](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/pthread.h.html) | `POSIX_PTHREAD_HEADER`
[signal.h](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/signal.h.html) | `POSIX_SIGNAL_HEADER`
[semaphore.h](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/semaphore.h.html) | `POSIX_SEMAPHORE_HEADER`
[time.h](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/time.h.html) | `POSIX_TIME_HEADER`

<b>Example:</b><br>
To use a header named `custom_errno.h` instead of `errno.h`, the `POSIX_ERRNO_HEADER` setting should be defined.
@code{c}
#define POSIX_ERRNO_HEADER    "custom_errno.h"
@endcode

@configpossible Strings representing file names. These files must be in the compiler's include path. <br>
@configdefault Standard POSIX header names.
*/

/**
@handles{platform,platform layer}
@enums{platform,platform layer}
@paramstructs{platform, platform layer}
*/

/**
@functionspage{platform,platform layer}

- @subpage platform_clock_functions <br>
  @copybrief platform_clock_functions
- @subpage platform_network_functions <br>
  @copybrief platform_network_functions
- @subpage platform_static_memory_functions <br>
  @copybrief platform_static_memory
- @subpage platform_threads_functions <br>
  @copybrief platform_threads_functions
*/
