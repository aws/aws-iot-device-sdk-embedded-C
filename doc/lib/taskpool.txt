/**
@mainpage
@anchor taskpool
@brief Task Pool library.

> A Task Pool is an adaptive set of threads that can grow and shrink to execute a user-provided callback through a user-defined job that can be scheduled with a non-blocking call. The design principles are to minimize the memory footprint while allowing asynchrnous execution. The adaptive behavior allows serving jobs in a timely way, without allocating system resources for the entire duration of the application. The user does not have to worry about synchronization and thread management. 

Features of this library include:
- Both fully asynchronous and blocking API functions.
- Scalable performance and footprint. The [configuration settings](@ref taskpool_config) allow this library to be tailored to a system's resources.
- Customizable caching for low memory allocation overhead. 

@dependencies{taskpool,Task Pool library}
@dot "Task Pool direct dependencies"
digraph taskpool_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        taskpool[label="Task Pool", fillcolor="#cc00ccff"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        singlelinkedlist[label="SingleLinkedList", URL="@ref singlelinkedlist"];
        queue[label="Queue", URL="@ref queue"];
        logging[label="Logging", URL="@ref logging"];
    }
    subgraph
    {
        rank = same;
        platform_threads[label="Thread management", fillcolor="#e89025ff", URL="@ref platform_threads"];
        platform_clock[label="Clock", fillcolor="#e89025ff", URL="@ref platform_clock"];\
        platform_static_memory[label="Static memory", fillcolor="#e89025ff", URL="@ref platform_static_memory"];
    }
    taskpool -> queue;
    taskpool -> logging [label=" if logging enabled", style="dashed"];
    taskpool -> platform_threads;
    queue -> platform_threads;
    logging -> platform_clock;
    logging -> platform_static_memory [label=" if static memory only", style="dashed"];
}
@enddot

Currently, the Task Pool library has the following dependencies:
- The linear containers (list/queue) library for maintaining the data structures for scheduled and in-progress Task Pool operations.
- The logging library may be used if @ref AWS_IOT_LOG_LEVEL_TASKPOOL is not @ref AWS_IOT_LOG_NONE.
- The platform layer provides an interface to the operating system for thread management, clock functions, networking, etc.

In addition to the components above, the Task Pool library may also depend on C standard library headers.
*/

/**
@page taskpool_design Design
@brief Architecture behind the Task Pool library.

This library uses a user-specified set of threads to process jobs speficied by the user as a callback and a context. User jobs are queued through a non-blocking call and processed asynchronously in the order they are received.
- [Task Pool API functions](@ref taskpool_functions) Provides a set of functions to enqueue an asynchronous operation on the <b>Dispatch Queue</b>. API functions are non-blocking and return after successfully enqueuing an operation.
- <b>Worker threads</b> in the Task Pool are woken up when operations arrive in the dispatch queue. These threads remove operations from the dispatch queue in FIFO order and execute the user-provided callback. After executing the user callback, the Task Pool threads try and execute any remaining jobs in the dispatch queue. The Task Pool tries and execute a user job as soon as it is received and if there are no threads available it will try and create one, up to the maximum number of allowed threads. The user can specificy the minimum and maximum number of threads allowed when creating the task pool.
- The user can try and cancel a job after the task has been scheduled. Cancellation is only allowed before the task enters execution. Wating on a completed task returns immediately.

Threads are created with @ref platform_threads_function_createdetachedthread. Because the platform layer may be re-implemented across systems, threads will be allocated for the Task Pool library on-the-go on some systems, while other systems may use an always-allocated thread pool.

The sequence diagram below illustrates the workflow described above. The application thread is able to continue executing while the Task Pool library processes the operation.

@image html taskpool_design_typicaloperation.png width=100%
*/

/**
@page taskpool_demo Demo
@brief The Task Pool demo demonstrates usage of the Task Pool library.

The Task Pool demo demonstrates the create-schedule workflow of Task Pool. After creating multiple jobs, it schedules all jobs and wait on their completion, or try and cancel them.

@image html taskpool_demo.png "Task Pool Demo Workflow" width=80%

See @subpage taskpool_demo_config for configuration settings that change the behavior of the demo.

The main Task Pool demo file, aws_iot_demo_taskpool.c, contains platform-independent code. See the following guides for running the Task Pool demo on various platforms.
- @subpage demo_posix <br>
  @copybrief demo_posix
*/

/**
@page taskpool_tests Tests
@brief Tests written for the Task Pool library.

The Task Pool tests are divided into the following subdirectories:
- `system`: Task Pool system and stress tests. Stress tests may run for a long time, so they are not run unless the [-l option is passed to the test executable](@ref taskpool_tests_optionl).
- `unit`: Task Pool unit tests. These tests do not require a network connection.

See @subpage taskpool_tests_config for configuration settings that change the behavior of the tests.

The current Task Pool tests use the [Unity test framework](http://www.throwtheswitch.org/unity/) and only run on POSIX systems. See @subpage taskpool_tests_running for a guide on running the tests.
*/

/**
@configpage{taskpool_tests,Task Pool tests,Test,tests}

<div class="configpagedivider">The settings below only affect the [stress](@ref aws_iot_tests_taskpool_stress.c) tests.</div>

*/

/**
@page taskpool_tests_running Running Task Pool tests
@brief Guide for running the Task Pool tests.

The current Task Pool tests use the [Unity test framework](http://www.throwtheswitch.org/unity/) and only run on POSIX systems.

@pre The tests have the following system dependencies:
- POSIX threads, mutexes, and semaphores (link with `-lpthread`).

@section taskpool_tests_building Building the tests
@brief How to build the Task Pool tests.

Before building the Task Pool tests, all desired configuration settings should be defined. Configuration settings include global [library](@ref global_library_config) and [test](@ref global_tests_config) settings, as well as settings for specific libraries and demos.

All tests specify their configuration settings in `tests/aws_iot_tests_config.h`. Any undefined settings will use a default value when possible.

The Task Pool tests build with a POSIX Makefile. A single Makefile will build all the Task Pool tests in both <i>dynamic memory</i> and <i>static memory only</i> modes. See @ref AWS_IOT_STATIC_MEMORY_ONLY for more information about static memory only mode. The Makefile also builds tests against AWS IoT and a [public Mosquitto test server](https://test.mosquitto.org/).

The Makefile for building the Task Pool tests is located in `tests/taskpool`. To build the tests:
@code
cd tests/task_pool
make
@endcode

The Makefile will generate four test executables:
- `aws_iot_tests_taskpool_aws`: Tests against AWS IoT in dynamic memory mode.

Run `make clean` to remove all test executables.

@section taskpool_tests_commandlineoptions Command line options
@brief Command line options of the Task Pool test executables.

All Task Pool test executables accept the following command line options.

@subsection taskpool_tests_optionl -l
@brief Enable long-running tests.

By default, the Task Pool test executables don't run the stress tests, which may take a long time to run and require an extremely stable network connection. Passing `-l` enables the long-running tests, which will run after all of the default tests finish.
*/

/**
@configpage{taskpool_demo,Task Pool demo,Demo,demos}

@section AWS_IOT_DEMO_MQTT_CLIENT_IDENTIFIER
@brief The Task Pool client identifier to use for the demo.

*/

/**
@configpage{taskpool,Task Pool library}

@section AWS_IOT_TASKPOOL_THREADS_STACK_MIN
@brief Set this to minimum stack depth to be enforced at runtime.

@section AWS_IOT_TASKPOOL_THREADS_STACK_SIZE
@brief Set this to the default stack depth used by the task pool initializers.

@section AWS_IOT_TASKPOOL_PRIORITY
@brief Set this to the default task priority used by the task pool initializers. 

@section AWS_IOT_TASKPOOL_ENABLE_ASSERTS
@brief Set this to `1` to perform sanity checks when using the Task Pool library.

Asserts are useful for debugging, but should be disabled in production code. If this is set to `1`, @ref AwsIotTaskPool_Assert can be defined to set the assertion function; otherwise, the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function will be used.

@configpossible `0` (asserts disabled) or `1` (asserts enabled)<br>
@configrecommended `1` when debugging; `0` in production code.<br>
@configdefault `0`

@section AWS_IOT_LOG_LEVEL_TASKPOOL
@brief Set the log level of the Task Pool library.

Log messages from the Task Pool library at or below this setting will be printed.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref AWS_IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #AWS_IOT_LOG_NONE.

@section AWS_IOT_TASKPOOL_TEST
@brief Set this to `1` to enable test access for the Task Pool library.

This setting is used by the [Task Pool tests](@ref taskpool_tests) to access the internal `static` functions and variables of the Task Pool library. When `1`, it enables the @c \#include directives at the bottom of the [Task Pool library source files](@ref lib/source/taskpool). These @c \#include directives include the test access files (located in `tests/taskpool/access`) that interact with the library's internal symbols. Unless the Task Pool library is being tested, this setting should be `0`.

@configpossible `0` (test access disabled) or `1` (test access enabled)<br>
@configrecommended `0`<br>
@configdefault `0`
*/
